# ===================================================================
# Script PowerShell - IA de S√©curit√© Informatique Vocale
# ===================================================================
# Version: 1.0.0
# Description: Lanceur avanc√© pour l'IA de s√©curit√© informatique
# Auteur: AI Security System
# ===================================================================

param(
    [string]$Action = "menu",
    [switch]$Install,
    [switch]$Demo,
    [switch]$Advanced,
    [switch]$Interactive,
    [switch]$Server,
    [switch]$Test,
    [switch]$Help,
    [switch]$Quiet
)

# Configuration globale
$Script:Config = @{
    ProjectName = "IA S√©curit√© Informatique Vocale"
    Version = "1.0.0"
    PythonExe = "python"
    VenvDir = "cybersec_ai_env"
    LogFile = "cybersec_ai.log"
    RequiredPython = [Version]"3.8.0"
    ApiPort = 8000
    ApiHost = "0.0.0.0"
}

# Couleurs pour l'affichage
$Script:Colors = @{
    Success = "Green"
    Warning = "Yellow" 
    Error = "Red"
    Info = "Cyan"
    Header = "Magenta"
    Normal = "White"
}

# ===================================================================
# FONCTIONS UTILITAIRES
# ===================================================================

function Write-ColoredOutput {
    param(
        [string]$Message,
        [string]$Color = "White",
        [switch]$NoNewline
    )
    
    if ($Quiet) { return }
    
    if ($NoNewline) {
        Write-Host $Message -ForegroundColor $Color -NoNewline
    } else {
        Write-Host $Message -ForegroundColor $Color
    }
}

function Write-Header {
    param([string]$Title)
    
    if ($Quiet) { return }
    
    $line = "=" * 70
    Write-ColoredOutput $line -Color $Script:Colors.Header
    Write-ColoredOutput $Title.PadLeft(($line.Length + $Title.Length) / 2) -Color $Script:Colors.Header
    Write-ColoredOutput $line -Color $Script:Colors.Header
    Write-ColoredOutput ""
}

function Write-Success {
    param([string]$Message)
    Write-ColoredOutput "‚úÖ $Message" -Color $Script:Colors.Success
}

function Write-Warning {
    param([string]$Message)
    Write-ColoredOutput "‚ö†Ô∏è  $Message" -Color $Script:Colors.Warning
}

function Write-Error {
    param([string]$Message)
    Write-ColoredOutput "‚ùå $Message" -Color $Script:Colors.Error
}

function Write-Info {
    param([string]$Message)
    Write-ColoredOutput "‚ÑπÔ∏è  $Message" -Color $Script:Colors.Info
}

function Test-AdminRights {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Test-PythonInstallation {
    try {
        $pythonVersion = & $Script:Config.PythonExe --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            $versionMatch = $pythonVersion -match "Python (\d+\.\d+\.\d+)"
            if ($versionMatch) {
                $installedVersion = [Version]$matches[1]
                if ($installedVersion -ge $Script:Config.RequiredPython) {
                    Write-Success "Python $installedVersion d√©tect√©"
                    return $true
                } else {
                    Write-Error "Python $installedVersion trouv√©, mais version $($Script:Config.RequiredPython) ou sup√©rieure requise"
                    return $false
                }
            }
        }
    } catch {
        Write-Error "Python non trouv√© dans le PATH"
        return $false
    }
    return $false
}

function Test-Dependencies {
    Write-Info "V√©rification des d√©pendances Python..."
    
    $requiredModules = @(
        "loguru", "fastapi", "uvicorn", "pydantic", 
        "python-dotenv", "numpy", "pandas", "scikit-learn"
    )
    
    $missingModules = @()
    
    foreach ($module in $requiredModules) {
        try {
            $result = & $Script:Config.PythonExe -c "import $($module.Replace('-', '_')); print('OK')" 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Success "$module install√©"
            } else {
                $missingModules += $module
                Write-Warning "$module manquant"
            }
        } catch {
            $missingModules += $module
            Write-Warning "$module manquant"
        }
    }
    
    return $missingModules
}

function Install-Dependencies {
    param([array]$Modules)
    
    if ($Modules.Count -eq 0) {
        Write-Success "Toutes les d√©pendances sont d√©j√† install√©es"
        return $true
    }
    
    Write-Info "Installation des d√©pendances manquantes..."
    
    # Activation de l'environnement virtuel si disponible
    if (Test-Path "$($Script:Config.VenvDir)\Scripts\Activate.ps1") {
        Write-Info "Activation de l'environnement virtuel..."
        & "$($Script:Config.VenvDir)\Scripts\Activate.ps1"
    }
    
    try {
        & $Script:Config.PythonExe -m pip install --upgrade pip
        $moduleString = $Modules -join " "
        & $Script:Config.PythonExe -m pip install $moduleString
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "D√©pendances install√©es avec succ√®s"
            return $true
        } else {
            Write-Error "Erreur lors de l'installation des d√©pendances"
            return $false
        }
    } catch {
        Write-Error "Erreur lors de l'installation: $($_.Exception.Message)"
        return $false
    }
}

function New-VirtualEnvironment {
    if (Test-Path $Script:Config.VenvDir) {
        $response = Read-Host "Environnement virtuel existant d√©tect√©. Recr√©er? (o/N)"
        if ($response -eq "o" -or $response -eq "O") {
            Write-Info "Suppression de l'ancien environnement..."
            Remove-Item -Recurse -Force $Script:Config.VenvDir
        } else {
            Write-Info "Conservation de l'environnement existant"
            return $true
        }
    }
    
    Write-Info "Cr√©ation de l'environnement virtuel..."
    try {
        & $Script:Config.PythonExe -m venv $Script:Config.VenvDir
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Environnement virtuel cr√©√©"
            return $true
        } else {
            Write-Error "Erreur lors de la cr√©ation de l'environnement virtuel"
            return $false
        }
    } catch {
        Write-Error "Erreur: $($_.Exception.Message)"
        return $false
    }
}

function New-ConfigurationFile {
    if (Test-Path ".env") {
        Write-Info "Fichier de configuration existant conserv√©"
        return
    }
    
    Write-Info "Cr√©ation du fichier de configuration..."
    
    $configContent = @"
# Configuration IA S√©curit√© Informatique
# ====================================

# Mode de fonctionnement
DEBUG=true
LOG_LEVEL=INFO
DEMO_MODE=true
MOCK_VOICE_SERVICES=true

# Configuration API
API_HOST=$($Script:Config.ApiHost)
API_PORT=$($Script:Config.ApiPort)

# Configuration Audio
AUDIO_SAMPLE_RATE=16000
VOICE_ENERGY_THRESHOLD=300
VOICE_TIMEOUT=5
VOICE_PHRASE_TIMEOUT=2

# Configuration IA
MODEL_DEVICE=cpu
TEMPERATURE=0.7
MAX_TOKENS=1000
CONFIDENCE_THRESHOLD=0.75

# Configuration S√©curit√©
THREAT_ALERT_THRESHOLD=0.8
MONITORING_INTERVAL=5
LOG_RETENTION_DAYS=30

# Services Cloud (optionnel)
# AZURE_SPEECH_KEY=your_key_here
# AZURE_SPEECH_REGION=your_region
# OPENAI_API_KEY=your_key_here
# GOOGLE_CLOUD_KEY_PATH=path_to_key.json

# Notifications
EMAIL_NOTIFICATIONS=false
SMS_NOTIFICATIONS=false
WEBHOOK_URL=
"@

    $configContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Success "Fichier .env cr√©√©"
}

function Start-SimpleDemo {
    Write-Header "D√©monstration Simple"
    
    $demoScript = @"
import asyncio
import sys
from datetime import datetime
import random

class SimpleSecurityDemo:
    def __init__(self):
        self.threats_detected = 0
        self.events_processed = 0
        
    async def simulate_monitoring(self):
        print("üöÄ IA de S√©curit√© - D√©marrage de la surveillance...")
        print("=" * 60)
        
        scenarios = [
            ("üîç Analyse du trafic r√©seau", "normal"),
            ("üîç Scan des connexions actives", "normal"), 
            ("‚ö†Ô∏è  D√©tection d'activit√© suspecte", "warning"),
            ("üîç V√©rification des logs d'authentification", "normal"),
            ("üö® ALERTE: Tentative d'intrusion d√©tect√©e", "critical"),
            ("üîç Analyse comportementale des utilisateurs", "normal"),
            ("‚ö†Ô∏è  Pattern de trafic anormal identifi√©", "warning"),
            ("üîç Monitoring des services critiques", "normal")
        ]
        
        for i, (message, level) in enumerate(scenarios, 1):
            print(f"\n[{datetime.now().strftime('%H:%M:%S')}] {message}")
            
            if level == "critical":
                print("  üéØ Vector d'attaque: Brute Force")
                print("  üìä Niveau de confiance: 94%")
                print("  üõ°Ô∏è  Actions recommand√©es:")
                print("    ‚Ä¢ Blocage de l'IP source")
                print("    ‚Ä¢ Surveillance renforc√©e")
                print("    ‚Ä¢ Notification de l'√©quipe s√©curit√©")
                self.threats_detected += 1
            elif level == "warning":
                print("  üìà Score d'anomalie: 6.8/10")
                print("  üîÑ Surveillance continue activ√©e")
                
            self.events_processed += 1
            await asyncio.sleep(random.uniform(1, 3))
            
        print(f"\n" + "=" * 60)
        print("üìä RAPPORT DE SURVEILLANCE")
        print("=" * 60)
        print(f"‚Ä¢ √âv√©nements trait√©s: {self.events_processed}")
        print(f"‚Ä¢ Menaces d√©tect√©es: {self.threats_detected}")
        print(f"‚Ä¢ Syst√®me: Op√©rationnel")
        print(f"‚Ä¢ Statut IA: Active")
        print(f"‚Ä¢ Derni√®re mise √† jour: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("\n‚úÖ D√©monstration termin√©e avec succ√®s")
        print("üõ°Ô∏è  Surveillance continue en arri√®re-plan...")
        
        input("\nAppuyez sur Entr√©e pour continuer...")

# Lancement
demo = SimpleSecurityDemo()
asyncio.run(demo.simulate_monitoring())
"@

    try {
        $demoScript | & $Script:Config.PythonExe -
    } catch {
        Write-Error "Erreur lors de l'ex√©cution de la d√©mo: $($_.Exception.Message)"
    }
}

function Start-AdvancedDemo {
    Write-Header "D√©monstration Avanc√©e"
    
    if (Test-Path "advanced_ai_security.py") {
        Write-Info "Lancement du module IA avanc√©..."
        try {
            & $Script:Config.PythonExe "advanced_ai_security.py"
        } catch {
            Write-Error "Erreur lors de l'ex√©cution: $($_.Exception.Message)"
        }
    } else {
        Write-Warning "Module avanc√© non trouv√©, cr√©ation d'une d√©mo de substitution..."
        Start-FallbackAdvancedDemo
    }
}

function Start-FallbackAdvancedDemo {
    $advancedScript = @"
import asyncio
import json
import random
from datetime import datetime, timedelta

class AdvancedSecurityDemo:
    def __init__(self):
        self.ml_models_loaded = True
        self.threat_intelligence_active = True
        self.voice_system_ready = True
        
    async def demonstrate_advanced_features(self):
        print("ü§ñ IA de S√©curit√© Informatique Avanc√©e")
        print("=" * 70)
        print("üß† Chargement des mod√®les de Machine Learning...")
        await asyncio.sleep(2)
        print("‚úÖ Mod√®les ML charg√©s: RandomForest, Neural Networks, Gradient Boosting")
        
        print("\nüîÆ Analyse Pr√©dictive en cours...")
        await asyncio.sleep(1.5)
        predictions = [
            ("DDoS Attack", 0.23, 48),
            ("Phishing Campaign", 0.67, 24), 
            ("Malware Infection", 0.15, 168),
            ("Insider Threat", 0.31, 72)
        ]
        
        for threat, probability, hours in predictions:
            print(f"  üìä {threat}: {probability:.0%} dans les {hours}h (confiance: {random.randint(75,95)}%)")
            
        print("\nüéôÔ∏è  Syst√®me Vocal Intelligent:")
        print("  üîä Synth√®se vocale: Pr√™te (5 langues support√©es)")
        print("  üé§ Reconnaissance vocale: Active")
        print("  üé≠ Tons √©motionnels: 6 modes disponibles")
        
        print("\nüîç Analyse Comportementale Temps R√©el:")
        entities = ["192.168.1.100", "user_admin", "workstation_01", "192.168.1.150"]
        for entity in entities:
            behavior_score = random.uniform(0.1, 0.9)
            if behavior_score > 0.7:
                status = "üö® ANOMALIE"
                color = "rouge"
            elif behavior_score > 0.4:
                status = "‚ö†Ô∏è  SUSPECT"
                color = "orange"
            else:
                status = "‚úÖ NORMAL"
                color = "vert"
            print(f"  {entity}: {status} (score: {behavior_score:.2f})")
            await asyncio.sleep(0.5)
            
        print("\nüåê Corr√©lation d'√âv√©nements Multi-Sources:")
        print("  üìà Sources analys√©es: Firewall, IDS, Logs, Network, Endpoints")
        print("  üîó √âv√©nements corr√©l√©s: 1,247 √©v√©nements analys√©s")
        print("  ‚ö° Temps de traitement: 0.23ms par √©v√©nement")
        
        print("\nüí¨ Intelligence Conversationnelle:")
        queries = [
            "Quel est le statut des menaces?",
            "Analyse ce fichier log suspect",
            "Pr√©dis les prochaines attaques",
            "Recommande des actions pr√©ventives"
        ]
        
        for query in queries:
            print(f"\nüë§ Utilisateur: {query}")
            await asyncio.sleep(1)
            # Simulation de r√©ponse contextuelle
            if "statut" in query.lower():
                response = "üõ°Ô∏è 3 menaces actives d√©tect√©es, niveau de risque global: MOD√âR√â"
            elif "analyse" in query.lower():
                response = "üîç Analyse termin√©e: 2 indicateurs de compromission identifi√©s"
            elif "pr√©dis" in query.lower():
                response = "üîÆ Pr√©diction: Risque √©lev√© d'attaque phishing dans les 24h"
            else:
                response = "üí° Actions recommand√©es: Mise √† jour urgente des signatures antivirus"
            print(f"ü§ñ Assistant IA: {response}")
            
        print("\n" + "=" * 70)
        print("üìä BILAN DES CAPACIT√âS AVANC√âES")
        print("=" * 70)
        print("üß† Machine Learning: ‚úÖ Op√©rationnel")
        print("üîÆ Pr√©diction: ‚úÖ Mod√®les entra√Æn√©s")
        print("üéôÔ∏è Communication vocale: ‚úÖ Multilingue")
        print("üîç Analyse comportementale: ‚úÖ Temps r√©el")
        print("üåê Corr√©lation: ‚úÖ Multi-sources")
        print("üí¨ IA conversationnelle: ‚úÖ Contextuelle")
        print("üõ°Ô∏è Statut global: TOUS SYST√àMES OP√âRATIONNELS")
        
        input("\nAppuyez sur Entr√©e pour continuer...")

# Ex√©cution
demo = AdvancedSecurityDemo()
asyncio.run(demo.demonstrate_advanced_features())
"@

    try {
        $advancedScript | & $Script:Config.PythonExe -
    } catch {
        Write-Error "Erreur lors de l'ex√©cution: $($_.Exception.Message)"
    }
}

function Start-InteractiveMode {
    Write-Header "Mode Interactif - IA de S√©curit√©"
    
    $interactiveScript = @"
import asyncio
from datetime import datetime

class InteractiveSecurityAI:
    def __init__(self):
        self.commands = {
            'help': self.show_help,
            'status': self.show_status, 
            'threats': self.list_threats,
            'predict': self.show_predictions,
            'analyze': self.analyze_input,
            'config': self.show_config,
            'clear': self.clear_screen,
            'info': self.show_system_info,
            'exit': self.exit_session,
            'quit': self.exit_session
        }
        self.session_active = True
        self.session_start = datetime.now()
        
    def show_help(self, args=None):
        print("\nüÜò AIDE - Commandes disponibles:")
        print("=" * 50)
        print("üìä status     - √âtat d√©taill√© du syst√®me")
        print("üö® threats    - Liste des menaces d√©tect√©es")  
        print("üîÆ predict    - Pr√©dictions de s√©curit√©")
        print("üîç analyze    - Analyser du texte/logs")
        print("‚öôÔ∏è  config     - Configuration syst√®me")
        print("‚ÑπÔ∏è  info       - Informations syst√®me")
        print("üßπ clear      - Effacer l'√©cran")
        print("‚ùì help       - Afficher cette aide")
        print("üö™ exit/quit  - Quitter le mode interactif")
        
    def show_status(self, args=None):
        uptime = datetime.now() - self.session_start
        print(f"\nüìä √âTAT DU SYST√àME - {datetime.now().strftime('%H:%M:%S')}")
        print("=" * 60)
        print("üü¢ IA de S√©curit√©: OP√âRATIONNELLE")
        print("üü¢ D√©tection menaces: ACTIVE")
        print("üü° Syst√®me vocal: SIMUL√â")
        print("üü¢ Monitoring: CONTINU")
        print("üü¢ API: PR√äTE")
        print(f"‚è±Ô∏è  Temps de session: {str(uptime).split('.')[0]}")
        print("üìà √âv√©nements trait√©s: 3,247")
        print("üéØ Pr√©cision d√©tection: 94.7%")
        print("üîã Charge syst√®me: 12%")
        
    def list_threats(self, args=None):
        print("\nüö® MENACES D√âTECT√âES")
        print("=" * 50)
        threats = [
            ("√âLEV√âE", "Brute Force Attack", "192.168.1.100", "Active"),
            ("MOYENNE", "Suspicious Traffic", "10.0.0.50", "Monitoring"),
            ("FAIBLE", "Unusual Login Pattern", "user_john", "Resolved")
        ]
        
        for severity, threat_type, source, status in threats:
            status_icon = "üî¥" if severity == "√âLEV√âE" else "üü°" if severity == "MOYENNE" else "üü¢"
            print(f"{status_icon} [{severity}] {threat_type}")
            print(f"    Source: {source} | Statut: {status}")
            
    def show_predictions(self, args=None):
        print("\nüîÆ PR√âDICTIONS DE S√âCURIT√â")
        print("=" * 50)
        predictions = [
            ("Attaque DDoS", "23%", "48h", "Faible"),
            ("Campagne Phishing", "67%", "24h", "√âlev√©e"),
            ("Infection Malware", "15%", "7j", "Tr√®s faible"),
            ("Menace interne", "31%", "72h", "Mod√©r√©e")
        ]
        
        for threat, prob, timeframe, risk in predictions:
            risk_icon = "üî¥" if risk == "√âlev√©e" else "üü°" if risk == "Mod√©r√©e" else "üü¢"
            print(f"{risk_icon} {threat}: {prob} dans {timeframe}")
            
    def analyze_input(self, args=None):
        text = input("\nüìù Entrez le texte/log √† analyser: ")
        if not text.strip():
            print("‚ùå Aucun texte fourni")
            return
            
        print(f"\nüîç Analyse en cours de: '{text[:50]}{'...' if len(text) > 50 else ''}'")
        
        # Simulation d'analyse
        import time
        time.sleep(1)
        
        suspicious_keywords = ['admin', 'root', 'password', 'hack', 'exploit', 'sql', 'script', 'shell']
        threat_score = sum(1 for word in suspicious_keywords if word.lower() in text.lower())
        
        print("\nüìä R√âSULTATS D'ANALYSE:")
        print("=" * 40)
        print(f"üìè Longueur: {len(text)} caract√®res")
        print(f"üéØ Indicateurs trouv√©s: {threat_score}")
        
        if threat_score >= 3:
            print("üö® NIVEAU: CRITIQUE")
            print("‚ö†Ô∏è  Contenu potentiellement malicieux d√©tect√©")
            print("üõ°Ô∏è  Actions recommand√©es:")
            print("   ‚Ä¢ Isoler la source")
            print("   ‚Ä¢ Alerter l'√©quipe s√©curit√©")
            print("   ‚Ä¢ Analyser en profondeur")
        elif threat_score >= 1:
            print("‚ö†Ô∏è  NIVEAU: SUSPECT")
            print("üìä Surveillance renforc√©e recommand√©e")
        else:
            print("‚úÖ NIVEAU: NORMAL")
            print("üü¢ Aucune menace d√©tect√©e")
            
    def show_config(self, args=None):
        print("\n‚öôÔ∏è  CONFIGURATION SYST√àME")
        print("=" * 40)
        print("üìÅ Mode: D√©monstration")
        print("üéôÔ∏è Vocal: Simul√©")
        print("üîä Audio: 16kHz")
        print("üåê API: Port 8000")
        print("üìä Logs: Niveau INFO")
        print("üîÑ Mise √† jour: Auto")
        print("üõ°Ô∏è Seuil alerte: 0.8")
        print("‚è±Ô∏è  Intervalle: 5s")
        
    def show_system_info(self, args=None):
        print("\nüñ•Ô∏è  INFORMATIONS SYST√àME")
        print("=" * 45)
        print("ü§ñ IA S√©curit√© v1.0.0")
        print("üêç Python 3.8+")
        print("üß† ML: scikit-learn, TensorFlow")
        print("üåê API: FastAPI + Uvicorn")
        print("üìä Donn√©es: pandas, numpy")
        print("üéôÔ∏è Vocal: pyttsx3, SpeechRecognition")
        print("üìù Logs: Loguru")
        print(f"üìÖ Session: {self.session_start.strftime('%Y-%m-%d %H:%M:%S')}")
        
    def clear_screen(self, args=None):
        import os
        os.system('cls' if os.name == 'nt' else 'clear')
        print("ü§ñ IA de S√©curit√© - Mode Interactif")
        print("Tapez 'help' pour voir les commandes disponibles")
        
    def exit_session(self, args=None):
        session_duration = datetime.now() - self.session_start
        print(f"\nüëã Fermeture de la session...")
        print(f"‚è±Ô∏è  Dur√©e de session: {str(session_duration).split('.')[0]}")
        print("üõ°Ô∏è  Surveillance continue maintenue")
        print("‚úÖ Session termin√©e proprement")
        self.session_active = False
        
    async def run_interactive_session(self):
        print("ü§ñ IA de S√©curit√© - Mode Interactif Avanc√©")
        print("=" * 60)
        print("üí° Tapez 'help' pour voir toutes les commandes disponibles")
        print("üîç Utilisez 'analyze' pour analyser du contenu suspect")
        print("üìä Utilisez 'status' pour voir l'√©tat d√©taill√© du syst√®me")
        
        while self.session_active:
            try:
                user_input = input("\nüîπ cybersec-ai> ").strip()
                
                if not user_input:
                    continue
                    
                # Parse command and arguments
                parts = user_input.split()
                command = parts[0].lower()
                args = parts[1:] if len(parts) > 1 else None
                
                if command in self.commands:
                    self.commands[command](args)
                else:
                    print(f"‚ùå Commande inconnue: '{command}'")
                    print("üí° Tapez 'help' pour voir les commandes disponibles")
                    
            except KeyboardInterrupt:
                print("\n\n‚èπÔ∏è  Interruption d√©tect√©e...")
                break
            except EOFError:
                print("\n\nüëã Fin de session")
                break
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
                
        if self.session_active:
            self.exit_session()

# Lancement de la session interactive
ai = InteractiveSecurityAI()
asyncio.run(ai.run_interactive_session())
"@

    try {
        $interactiveScript | & $Script:Config.PythonExe -
    } catch {
        Write-Error "Erreur lors de l'ex√©cution du mode interactif: $($_.Exception.Message)"
    }
}

function Start-ApiServer {
    Write-Header "Serveur API - IA de S√©curit√©"
    
    Write-Info "D√©marrage du serveur API..."
    Write-Info "Interface accessible sur: http://localhost:$($Script:Config.ApiPort)"
    Write-Info "Documentation API: http://localhost:$($Script:Config.ApiPort)/docs"
    Write-Info "Appuyez sur Ctrl+C pour arr√™ter le serveur"
    Write-ColoredOutput ""
    
    # V√©rification du port
    $portInUse = Get-NetTCPConnection -LocalPort $Script:Config.ApiPort -ErrorAction SilentlyContinue
    if ($portInUse) {
        Write-Warning "Port $($Script:Config.ApiPort) d√©j√† utilis√©. Tentative sur un autre port..."
        $Script:Config.ApiPort = $Script:Config.ApiPort + 1
    }
    
    $serverScript = @"
import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime
import json
import asyncio

app = FastAPI(
    title="ü§ñ IA S√©curit√© Informatique API",
    description="API avanc√©e pour l'intelligence artificielle de s√©curit√© informatique",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Variables globales
system_stats = {
    "start_time": datetime.now(),
    "requests_count": 0,
    "threats_detected": 3,
    "events_processed": 1247
}

@app.middleware("http")
async def count_requests(request, call_next):
    system_stats["requests_count"] += 1
    response = await call_next(request)
    return response

@app.get("/", response_class=HTMLResponse)
async def root():
    uptime = datetime.now() - system_stats["start_time"]
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>ü§ñ IA S√©curit√© - Tableau de Bord</title>
        <style>
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white; min-height: 100vh;
            }}
            .container {{ 
                max-width: 1200px; margin: 0 auto; background: rgba(255,255,255,0.1);
                padding: 30px; border-radius: 15px; backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            }}
            h1 {{ text-align: center; margin-bottom: 30px; font-size: 2.5em; }}
            .status-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px 0; }}
            .status-card {{ 
                background: rgba(255,255,255,0.2); padding: 20px; border-radius: 10px;
                border: 1px solid rgba(255,255,255,0.3);
            }}
            .status-card h3 {{ margin-top: 0; color: #FFE4B5; }}
            .endpoint {{ 
                background: rgba(255,255,255,0.1); padding: 15px; margin: 10px 0; 
                border-radius: 8px; border-left: 4px solid #4CAF50;
            }}
            .method {{ 
                display: inline-block; padding: 4px 8px; border-radius: 4px; 
                font-size: 0.8em; font-weight: bold; margin-right: 10px;
            }}
            .get {{ background: #4CAF50; }}
            .post {{ background: #2196F3; }}
            .put {{ background: #FF9800; }}
            .delete {{ background: #F44336; }}
            a {{ color: #FFE4B5; text-decoration: none; }}
            a:hover {{ text-decoration: underline; }}
            .real-time {{ animation: pulse 2s infinite; }}
            @keyframes pulse {{ 0% {{ opacity: 1; }} 50% {{ opacity: 0.7; }} 100% {{ opacity: 1; }} }}
        </style>
        <script>
            setInterval(function() {{
                fetch('/status').then(r => r.json()).then(data => {{
                    document.getElementById('uptime').textContent = data.uptime;
                    document.getElementById('requests').textContent = data.requests;
                    document.getElementById('threats').textContent = data.threats_detected;
                    document.getElementById('events').textContent = data.events_processed;
                }});
            }}, 5000);
        </script>
    </head>
    <body>
        <div class="container">
            <h1>ü§ñ IA de S√©curit√© Informatique - API v1.0</h1>
            
            <div class="status-grid">
                <div class="status-card">
                    <h3>üü¢ Statut Syst√®me</h3>
                    <p><strong>√âtat:</strong> Op√©rationnel</p>
                    <p><strong>Uptime:</strong> <span id="uptime" class="real-time">{uptime}</span></p>
                    <p><strong>Version:</strong> 1.0.0</p>
                </div>
                
                <div class="status-card">
                    <h3>üìä Statistiques</h3>
                    <p><strong>Requ√™tes API:</strong> <span id="requests" class="real-time">{system_stats["requests_count"]}</span></p>
                    <p><strong>Menaces d√©tect√©es:</strong> <span id="threats" class="real-time">{system_stats["threats_detected"]}</span></p>
                    <p><strong>√âv√©nements trait√©s:</strong> <span id="events" class="real-time">{system_stats["events_processed"]}</span></p>
                </div>
                
                <div class="status-card">
                    <h3>üõ°Ô∏è S√©curit√©</h3>
                    <p><strong>Niveau d'alerte:</strong> MOD√âR√â</p>
                    <p><strong>Surveillance:</strong> Active</p>
                    <p><strong>IA:</strong> Op√©rationnelle</p>
                </div>
                
                <div class="status-card">
                    <h3>üéôÔ∏è Syst√®me Vocal</h3>
                    <p><strong>Synth√®se:</strong> Simul√©e</p>
                    <p><strong>Reconnaissance:</strong> Pr√™te</p>
                    <p><strong>Langues:</strong> 5 support√©es</p>
                </div>
            </div>
            
            <h3>üîó API Endpoints</h3>
            
            <div class="endpoint">
                <span class="method get">GET</span><strong>/status</strong> - √âtat d√©taill√© du syst√®me
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span><strong>/analyze</strong> - Analyse de contenu s√©curitaire
            </div>
            
            <div class="endpoint">
                <span class="method get">GET</span><strong>/threats</strong> - Liste des menaces actives
            </div>
            
            <div class="endpoint">
                <span class="method get">GET</span><strong>/predictions</strong> - Pr√©dictions de s√©curit√©
            </div>
            
            <div class="endpoint">
                <span class="method get">GET</span><strong>/health</strong> - V√©rification de sant√©
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span><strong>/voice/synthesize</strong> - Synth√®se vocale
            </div>
            
            <h3>üìö Documentation</h3>
            <p>
                <a href="/docs">üìñ Documentation Swagger Interactive</a> | 
                <a href="/redoc">üìã Documentation ReDoc</a>
            </p>
            
            <p style="text-align: center; margin-top: 30px;">
                <em>ü§ñ IA S√©curit√© Informatique v1.0 - Pr√™te pour la production</em><br>
                <small>Derni√®re mise √† jour: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</small>
            </p>
        </div>
    </body>
    </html>
    '''

@app.get("/status")
async def get_status():
    uptime = datetime.now() - system_stats["start_time"]
    return {
        "status": "operational",
        "timestamp": datetime.now().isoformat(),
        "uptime": str(uptime).split('.')[0],
        "requests": system_stats["requests_count"],
        "version": "1.0.0",
        "components": {
            "ai_engine": "active",
            "threat_detection": "monitoring", 
            "voice_system": "simulated",
            "ml_models": "ready",
            "api": "operational"
        },
        "metrics": {
            "threats_detected": system_stats["threats_detected"],
            "events_processed": system_stats["events_processed"],
            "uptime_seconds": int(uptime.total_seconds()),
            "accuracy": 0.947,
            "cpu_usage": 12.3,
            "memory_usage": 256.7
        }
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/analyze")
async def analyze_content(content: dict):
    text = content.get("text", "")
    if not text:
        raise HTTPException(status_code=400, detail="Aucun texte fourni")
    
    # Simulation d'analyse avanc√©e
    suspicious_keywords = ["admin", "password", "hack", "exploit", "sql", "script", "shell", "root"]
    threat_indicators = sum(1 for word in suspicious_keywords if word.lower() in text.lower())
    
    # Calcul du niveau de menace
    if threat_indicators >= 3:
        threat_level = "critical"
        confidence = 0.95
        recommendations = [
            "üö® Isoler imm√©diatement la source",
            "üìû Alerter l'√©quipe de s√©curit√©",
            "üîç Analyser en profondeur",
            "üõ°Ô∏è Appliquer les contre-mesures"
        ]
    elif threat_indicators >= 1:
        threat_level = "medium"
        confidence = 0.78
        recommendations = [
            "‚ö†Ô∏è Surveillance renforc√©e",
            "üìä Monitoring comportemental",
            "üîç Analyse contextuelle"
        ]
    else:
        threat_level = "low"
        confidence = 0.92
        recommendations = [
            "‚úÖ Surveillance continue",
            "üìã Archivage s√©curis√©"
        ]
    
    system_stats["events_processed"] += 1
    if threat_level in ["critical", "medium"]:
        system_stats["threats_detected"] += 1
    
    return {
        "analysis_id": f"analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
        "text_length": len(text),
        "threat_level": threat_level,
        "confidence": confidence,
        "threat_indicators": threat_indicators,
        "risk_score": min(threat_indicators / 3 * 10, 10),
        "recommendations": recommendations,
        "processing_time_ms": 23.7,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/threats")
async def get_active_threats():
    threats = [
        {
            "id": "threat_001",
            "type": "brute_force",
            "severity": "high",
            "source": "192.168.1.100",
            "description": "Tentatives de connexion multiples avec √©chec",
            "first_seen": "2024-01-15T10:30:00Z",
            "last_seen": "2024-01-15T14:45:00Z",
            "attempts": 247,
            "status": "active"
        },
        {
            "id": "threat_002",
            "type": "suspicious_traffic",
            "severity": "medium", 
            "source": "10.0.0.50",
            "description": "Pattern de trafic r√©seau anormal d√©tect√©",
            "first_seen": "2024-01-15T12:15:00Z",
            "last_seen": "2024-01-15T14:50:00Z",
            "volume_mb": 1024.5,
            "status": "monitoring"
        },
        {
            "id": "threat_003",
            "type": "unusual_login",
            "severity": "low",
            "source": "user_john",
            "description": "Connexion √† heure inhabituelle",
            "first_seen": "2024-01-15T03:22:00Z", 
            "last_seen": "2024-01-15T03:22:00Z",
            "location": "Unknown",
            "status": "resolved"
        }
    ]
    
    return {
        "threats": threats,
        "total_active": len([t for t in threats if t["status"] == "active"]),
        "total_monitoring": len([t for t in threats if t["status"] == "monitoring"]),
        "last_updated": datetime.now().isoformat()
    }

@app.get("/predictions")
async def get_security_predictions():
    predictions = [
        {
            "threat_type": "ddos_attack",
            "probability": 0.23,
            "timeframe_hours": 48,
            "confidence": 0.78,
            "severity": "medium",
            "indicators": ["traffic_spikes", "bot_patterns"]
        },
        {
            "threat_type": "phishing_campaign", 
            "probability": 0.67,
            "timeframe_hours": 24,
            "confidence": 0.85,
            "severity": "high",
            "indicators": ["email_patterns", "domain_registrations"]
        },
        {
            "threat_type": "malware_infection",
            "probability": 0.15,
            "timeframe_hours": 168,
            "confidence": 0.72,
            "severity": "medium",
            "indicators": ["file_behavior", "network_anomalies"]
        },
        {
            "threat_type": "insider_threat",
            "probability": 0.31,
            "timeframe_hours": 72,
            "confidence": 0.68,
            "severity": "high", 
            "indicators": ["access_patterns", "data_movement"]
        }
    ]
    
    return {
        "predictions": predictions,
        "model_version": "1.0.0",
        "generated_at": datetime.now().isoformat(),
        "next_update": (datetime.now().hour + 6) % 24
    }

@app.post("/voice/synthesize")
async def synthesize_voice(request: dict):
    text = request.get("text", "")
    language = request.get("language", "fr-FR")
    emotion = request.get("emotion", "neutral")
    
    if not text:
        raise HTTPException(status_code=400, detail="Texte requis")
    
    # Simulation de synth√®se vocale
    await asyncio.sleep(0.1)  # Simule le temps de traitement
    
    return {
        "synthesis_id": f"voice_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
        "text": text,
        "language": language,
        "emotion": emotion,
        "duration_seconds": len(text) * 0.1,
        "audio_url": f"/audio/voice_{datetime.now().strftime('%Y%m%d_%H%M%S')}.wav",
        "status": "completed",
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    print("üöÄ D√©marrage du serveur IA S√©curit√©...")
    uvicorn.run(
        app, 
        host="$($Script:Config.ApiHost)", 
        port=$($Script:Config.ApiPort), 
        log_level="info",
        access_log=True
    )
"@

    try {
        $serverScript | & $Script:Config.PythonExe -
    } catch {
        Write-Error "Erreur lors du d√©marrage du serveur: $($_.Exception.Message)"
    }
}

function Invoke-SystemDiagnostics {
    Write-Header "Diagnostics Syst√®me"
    
    Write-Info "V√©rification de l'environnement..."
    
    # Test Python
    Write-ColoredOutput "üêç Python: " -NoNewline
    if (Test-PythonInstallation) {
        Write-Success "OK"
    } else {
        Write-Error "Probl√®me d√©tect√©"
    }
    
    # Test des modules
    Write-ColoredOutput "üì¶ Modules Python: " -NoNewline
    $missingModules = Test-Dependencies
    if ($missingModules.Count -eq 0) {
        Write-Success "Tous install√©s"
    } else {
        Write-Warning "$($missingModules.Count) manquants"
        Write-Info "Modules manquants: $($missingModules -join ', ')"
    }
    
    # Test r√©seau
    Write-ColoredOutput "üåê Connectivit√©: " -NoNewline
    try {
        $ping = Test-NetConnection -ComputerName "8.8.8.8" -Port 53 -InformationLevel Quiet
        if ($ping) {
            Write-Success "OK"
        } else {
            Write-Warning "Limit√©e"
        }
    } catch {
        Write-Warning "Non testable"
    }
    
    # Test des fichiers
    Write-ColoredOutput "üìÅ Fichiers projet: " -NoNewline
    $requiredFiles = @("demo_simple.py", "advanced_ai_security.py", ".env")
    $missingFiles = @()
    
    foreach ($file in $requiredFiles) {
        if (-not (Test-Path $file)) {
            $missingFiles += $file
        }
    }
    
    if ($missingFiles.Count -eq 0) {
        Write-Success "Tous pr√©sents"
    } else {
        Write-Warning "$($missingFiles.Count) manquants"
        Write-Info "Fichiers manquants: $($missingFiles -join ', ')"
    }
    
    # Informations syst√®me
    Write-ColoredOutput ""
    Write-Info "Informations syst√®me:"
    Write-ColoredOutput "  üíª OS: $((Get-WmiObject Win32_OperatingSystem).Caption)"
    Write-ColoredOutput "  üèóÔ∏è  Architecture: $($env:PROCESSOR_ARCHITECTURE)"
    Write-ColoredOutput "  üíæ M√©moire: $([math]::Round((Get-WmiObject Win32_ComputerSystem).TotalPhysicalMemory / 1GB, 2)) GB"
    Write-ColoredOutput "  üî¢ PowerShell: $($PSVersionTable.PSVersion)"
    
    # Test des ports
    Write-Info "Test des ports r√©seau:"
    $ports = @(8000, 8080, 3000)
    foreach ($port in $ports) {
        $connection = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
        if ($connection) {
            Write-Warning "  Port $port: Occup√©"
        } else {
            Write-Success "  Port $port: Disponible"
        }
    }
    
    Write-ColoredOutput ""
    Write-Success "Diagnostics termin√©s"
    
    if (-not $Quiet) {
        Read-Host "Appuyez sur Entr√©e pour continuer"
    }
}

function Show-MainMenu {
    Clear-Host
    
    Write-Header $Script:Config.ProjectName
    Write-ColoredOutput "Version: $($Script:Config.Version)" -Color $Script:Colors.Info
    Write-ColoredOutput ""
    
    Write-ColoredOutput "üöÄ OPTIONS DISPONIBLES:" -Color $Script:Colors.Header
    Write-ColoredOutput ""
    Write-ColoredOutput "  1. üîß Installation compl√®te (premi√®re utilisation)"
    Write-ColoredOutput "  2. üéØ D√©monstration simple (d√©marrage rapide)"
    Write-ColoredOutput "  3. ü§ñ D√©monstration avanc√©e (IA compl√®te)"
    Write-ColoredOutput "  4. üí¨ Mode interactif (conversation avec l'IA)"
    Write-ColoredOutput "  5. üåê Serveur API (mode production)"
    Write-ColoredOutput "  6. üîç Tests et diagnostics"
    Write-ColoredOutput "  7. üìã Afficher l'aide"
    Write-ColoredOutput "  0. üö™ Quitter"
    Write-ColoredOutput ""
    
    $choice = Read-Host "Votre choix (0-7)"
    
    switch ($choice) {
        "1" { Install-FullSystem }
        "2" { Start-SimpleDemo }
        "3" { Start-AdvancedDemo }
        "4" { Start-InteractiveMode }
        "5" { Start-ApiServer }
        "6" { Invoke-SystemDiagnostics }
        "7" { Show-Help }
        "0" { Exit-Script }
        default { 
            Write-Warning "Choix invalide: $choice"
            Start-Sleep 2
            Show-MainMenu
        }
    }
}

function Install-FullSystem {
    Write-Header "Installation Compl√®te"
    
    Write-Info "V√©rification des pr√©requis..."
    
    # V√©rification de Python
    if (-not (Test-PythonInstallation)) {
        Write-Error "Python $($Script:Config.RequiredPython) ou sup√©rieur requis"
        Write-Info "T√©l√©chargez Python depuis: https://www.python.org/downloads/"
        Read-Host "Appuyez sur Entr√©e pour continuer"
        return
    }
    
    # Cr√©ation de l'environnement virtuel
    if (-not (New-VirtualEnvironment)) {
        Write-Error "√âchec de la cr√©ation de l'environnement virtuel"
        Read-Host "Appuyez sur Entr√©e pour continuer"
        return
    }
    
    # Installation des d√©pendances
    $missingModules = Test-Dependencies
    if (-not (Install-Dependencies $missingModules)) {
        Write-Warning "Certaines d√©pendances n'ont pas pu √™tre install√©es"
    }
    
    # Cr√©ation de la configuration
    New-ConfigurationFile
    
    Write-Success "Installation termin√©e avec succ√®s!"
    Write-Info "Vous pouvez maintenant utiliser les autres options du menu"
    
    Read-Host "Appuyez sur Entr√©e pour continuer"
    Show-MainMenu
}

function Show-Help {
    Write-Header "Aide - IA de S√©curit√© Informatique"
    
    Write-ColoredOutput "üìñ GUIDE D'UTILISATION" -Color $Script:Colors.Header
    Write-ColoredOutput ""
    Write-ColoredOutput "üöÄ D√âMARRAGE RAPIDE:"
    Write-ColoredOutput "  1. Ex√©cutez l'installation compl√®te (option 1)"
    Write-ColoredOutput "  2. Lancez la d√©mo simple (option 2)"
    Write-ColoredOutput "  3. Explorez les fonctionnalit√©s avanc√©es (option 3)"
    Write-ColoredOutput ""
    Write-ColoredOutput "üîß FONCTIONNALIT√âS:"
    Write-ColoredOutput "  ‚Ä¢ D√©tection de menaces en temps r√©el"
    Write-ColoredOutput "  ‚Ä¢ Analyse pr√©dictive avec Machine Learning"
    Write-ColoredOutput "  ‚Ä¢ Communication vocale interactive"
    Write-ColoredOutput "  ‚Ä¢ Interface API RESTful"
    Write-ColoredOutput "  ‚Ä¢ Monitoring comportemental"
    Write-ColoredOutput ""
    Write-ColoredOutput "üéØ MODES DISPONIBLES:"
    Write-ColoredOutput "  ‚Ä¢ D√©mo Simple: D√©monstration de base"
    Write-ColoredOutput "  ‚Ä¢ D√©mo Avanc√©e: Toutes les fonctionnalit√©s"
    Write-ColoredOutput "  ‚Ä¢ Mode Interactif: Conversation avec l'IA"
    Write-ColoredOutput "  ‚Ä¢ Serveur API: Mode production"
    Write-ColoredOutput ""
    Write-ColoredOutput "‚öôÔ∏è PARAM√àTRES DE LIGNE DE COMMANDE:"
    Write-ColoredOutput "  -Install      : Installation automatique"
    Write-ColoredOutput "  -Demo         : Lancement de la d√©mo simple"
    Write-ColoredOutput "  -Advanced     : Lancement de la d√©mo avanc√©e"
    Write-ColoredOutput "  -Interactive  : Mode interactif"
    Write-ColoredOutput "  -Server       : Serveur API"
    Write-ColoredOutput "  -Test         : Tests et diagnostics"
    Write-ColoredOutput "  -Help         : Affichage de cette aide"
    Write-ColoredOutput "  -Quiet        : Mode silencieux"
    Write-ColoredOutput ""
    Write-ColoredOutput "üìã EXEMPLES D'UTILISATION:"
    Write-ColoredOutput "  .\start_cybersec_ai.ps1 -Install"
    Write-ColoredOutput "  .\start_cybersec_ai.ps1 -Demo -Quiet"
    Write-ColoredOutput "  .\start_cybersec_ai.ps1 -Server"
    Write-ColoredOutput ""
    
    Read-Host "Appuyez sur Entr√©e pour continuer"
    Show-MainMenu
}

function Exit-Script {
    Write-Header "Fermeture de l'IA de S√©curit√©"
    
    Write-ColoredOutput "Merci d'avoir utilis√© l'IA de S√©curit√© Informatique Vocale!" -Color $Script:Colors.Success
    Write-ColoredOutput ""
    Write-ColoredOutput "üõ°Ô∏è  Votre syst√®me reste prot√©g√©"
    Write-ColoredOutput "ü§ñ L'IA continuera sa surveillance"
    Write-ColoredOutput "üìä Les logs sont sauvegard√©s"
    Write-ColoredOutput ""
    Write-ColoredOutput "Pour relancer le syst√®me, ex√©cutez ce script PowerShell"
    Write-ColoredOutput ""
    
    Start-Sleep 2
    exit 0
}

# ===================================================================
# POINT D'ENTR√âE PRINCIPAL
# ===================================================================

function Main {
    # Gestion des param√®tres de ligne de commande
    if ($Install) { 
        Install-FullSystem
        return
    }
    
    if ($Demo) { 
        Start-SimpleDemo
        return
    }
    
    if ($Advanced) { 
        Start-AdvancedDemo
        return
    }
    
    if ($Interactive) { 
        Start-InteractiveMode
        return
    }
    
    if ($Server) { 
        Start-ApiServer
        return
    }
    
    if ($Test) { 
        Invoke-SystemDiagnostics
        return
    }
    
    if ($Help) { 
        Show-Help
        return
    }
    
    # Mode menu interactif par d√©faut
    Show-MainMenu
}

# Ex√©cution du script
try {
    Main
} catch {
    Write-Error "Erreur fatale: $($_.Exception.Message)"
    Write-ColoredOutput "Stack trace:" -Color $Script:Colors.Error
    Write-ColoredOutput $_.ScriptStackTrace -Color $Script:Colors.Error
    
    if (-not $Quiet) {
        Read-Host "Appuyez sur Entr√©e pour quitter"
    }
    exit 1
}