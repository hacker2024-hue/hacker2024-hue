version: '3.8'

services:
  # Service principal CyberSec AI
  cybersec-ai:
    build:
      context: .
      target: production
    container_name: cybersec-ai
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
      - DATABASE_URL=postgresql://cybersec:${POSTGRES_PASSWORD:-cybersec123}@postgres:5432/cybersec_ai
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./reports:/app/reports
    networks:
      - cybersec-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: cybersec-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cybersec_ai
      - POSTGRES_USER=cybersec
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cybersec123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - cybersec-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cybersec -d cybersec_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: cybersec-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cybersec-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Interface d'administration PostgreSQL (optionnel)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cybersec-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@cybersec.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - cybersec-network
    depends_on:
      - postgres
    profiles:
      - admin

  # Interface Redis (optionnel)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cybersec-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - cybersec-network
    depends_on:
      - redis
    profiles:
      - admin

  # Nginx proxy pour la production (optionnel)
  nginx:
    image: nginx:alpine
    container_name: cybersec-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - cybersec-network
    depends_on:
      - cybersec-ai
    profiles:
      - production

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: cybersec-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - cybersec-network
    profiles:
      - monitoring

  # Grafana pour les dashboards (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: cybersec-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - cybersec-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Réseaux
networks:
  cybersec-network:
    driver: bridge
    name: cybersec-network

# Volumes persistants
volumes:
  postgres_data:
    name: cybersec_postgres_data
  redis_data:
    name: cybersec_redis_data
  pgadmin_data:
    name: cybersec_pgadmin_data
  prometheus_data:
    name: cybersec_prometheus_data
  grafana_data:
    name: cybersec_grafana_data