#!/usr/bin/env python3
"""
Script de configuration automatique
===================================

Configuration initiale de CyberSec AI Assistant.
"""

import os
import sys
import asyncio
import subprocess
from pathlib import Path
from loguru import logger
import secrets


def create_env_file():
    """Cr√©ation du fichier .env avec des valeurs par d√©faut"""
    
    env_file = Path(".env")
    
    if env_file.exists():
        logger.info("Fichier .env existant trouv√©")
        return
    
    logger.info("Cr√©ation du fichier .env...")
    
    # G√©n√©ration d'une cl√© secr√®te
    secret_key = secrets.token_urlsafe(32)
    
    env_content = f"""# Configuration CyberSec AI Assistant
# G√©n√©r√© automatiquement le {os.popen('date').read().strip()}

# Application
DEBUG=true
SECRET_KEY={secret_key}
LOG_LEVEL=INFO

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_WORKERS=1

# Database Configuration (SQLite par d√©faut pour dev)
DATABASE_URL=sqlite:///./cybersec_ai.db

# Redis Configuration
REDIS_URL=redis://localhost:6379/0
CACHE_TTL=3600

# IA Model Configuration
AI_MODEL=microsoft/DialoGPT-medium
MODEL_DEVICE=cpu
MAX_RESPONSE_LENGTH=512
AI_TEMPERATURE=0.7

# Authentication
ACCESS_TOKEN_EXPIRE=30
JWT_ALGORITHM=HS256

# Communication Configuration
MAX_CONVERSATION_HISTORY=50
RESPONSE_TIMEOUT=30

# Security Analysis Configuration
MALWARE_ANALYSIS=true
NETWORK_MONITORING=true
VULN_SCANNING=true
"""
    
    with open(env_file, "w") as f:
        f.write(env_content)
    
    logger.success("Fichier .env cr√©√© avec succ√®s")


def install_spacy_model():
    """Installation du mod√®le spaCy"""
    
    logger.info("V√©rification du mod√®le spaCy...")
    
    try:
        import spacy
        try:
            spacy.load("en_core_web_sm")
            logger.success("Mod√®le spaCy d√©j√† install√©")
            return True
        except OSError:
            logger.info("Installation du mod√®le spaCy en_core_web_sm...")
            result = subprocess.run([
                sys.executable, "-m", "spacy", "download", "en_core_web_sm"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.success("Mod√®le spaCy install√© avec succ√®s")
                return True
            else:
                logger.error(f"Erreur lors de l'installation: {result.stderr}")
                return False
                
    except ImportError:
        logger.error("spaCy n'est pas install√©")
        return False


def create_directories():
    """Cr√©ation des r√©pertoires n√©cessaires"""
    
    directories = [
        "logs",
        "data",
        "models",
        "reports",
        "uploads"
    ]
    
    for directory in directories:
        path = Path(directory)
        if not path.exists():
            path.mkdir(parents=True, exist_ok=True)
            logger.info(f"R√©pertoire cr√©√©: {directory}")
        else:
            logger.debug(f"R√©pertoire existant: {directory}")


def check_system_requirements():
    """V√©rification des pr√©requis syst√®me"""
    
    logger.info("V√©rification des pr√©requis syst√®me...")
    
    # Version Python
    python_version = sys.version_info
    if python_version < (3, 8):
        logger.error(f"Python 3.8+ requis, trouv√©: {python_version.major}.{python_version.minor}")
        return False
    
    logger.success(f"Version Python OK: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # M√©moire disponible
    try:
        import psutil
        memory = psutil.virtual_memory()
        memory_gb = memory.total / (1024**3)
        
        if memory_gb < 4:
            logger.warning(f"M√©moire limit√©e: {memory_gb:.1f}GB (4GB+ recommand√©s)")
        else:
            logger.success(f"M√©moire OK: {memory_gb:.1f}GB")
            
    except ImportError:
        logger.info("psutil non disponible, impossible de v√©rifier la m√©moire")
    
    return True


async def test_installation():
    """Test de l'installation"""
    
    logger.info("Test de l'installation...")
    
    try:
        # Import des modules principaux
        from core.config import config
        from core.ai_engine import CyberSecAI
        
        logger.success("‚úÖ Imports des modules principaux OK")
        
        # Test de configuration
        logger.info(f"Configuration charg√©e: {config.app_name} v{config.version}")
        
        # Test basique du moteur IA (sans initialisation compl√®te)
        ai_engine = CyberSecAI()
        logger.success("‚úÖ Moteur IA instanci√©")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test: {e}")
        return False


def print_final_instructions():
    """Affichage des instructions finales"""
    
    print("\n" + "="*60)
    print("üéâ Configuration termin√©e avec succ√®s!")
    print("="*60)
    print()
    print("üìã Prochaines √©tapes:")
    print("  1. V√©rifiez le fichier .env et ajustez si n√©cessaire")
    print("  2. Lancez l'application avec: python main.py")
    print("  3. Acc√©dez √† l'interface: http://localhost:8000")
    print("  4. Documentation API: http://localhost:8000/docs")
    print()
    print("üõ†Ô∏è Commandes utiles:")
    print("  ‚Ä¢ Installation GPU: pip install torch[cuda]")
    print("  ‚Ä¢ Mode production: pip install .[production]")
    print("  ‚Ä¢ Tests: pytest")
    print()
    print("üìö Aide et documentation:")
    print("  ‚Ä¢ GitHub: https://github.com/hacker2024-hue/cybersec-ai-assistant")
    print("  ‚Ä¢ Issues: https://github.com/hacker2024-hue/cybersec-ai-assistant/issues")
    print()


def main():
    """Fonction principale de configuration"""
    
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë           CyberSec AI Assistant - Configuration          ‚ïë
    ‚ïë                     Script de Setup                     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    logger.info("üöÄ D√©marrage de la configuration...")
    
    # V√©rifications syst√®me
    if not check_system_requirements():
        logger.error("‚ùå Pr√©requis syst√®me non satisfaits")
        sys.exit(1)
    
    # Cr√©ation des r√©pertoires
    create_directories()
    
    # Cr√©ation du fichier .env
    create_env_file()
    
    # Installation du mod√®le spaCy
    if not install_spacy_model():
        logger.warning("‚ö†Ô∏è Le mod√®le spaCy n'a pas pu √™tre install√© automatiquement")
        logger.info("Vous pouvez l'installer manuellement avec: python -m spacy download en_core_web_sm")
    
    # Test de l'installation
    if asyncio.run(test_installation()):
        logger.success("‚úÖ Installation test√©e avec succ√®s")
    else:
        logger.error("‚ùå Erreur lors du test d'installation")
        sys.exit(1)
    
    print_final_instructions()


if __name__ == "__main__":
    main()