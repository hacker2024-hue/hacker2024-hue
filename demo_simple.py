#!/usr/bin/env python3
"""
D√©monstration Simplifi√©e - IA de S√©curit√© Informatique Vocale
============================================================

Version all√©g√©e pour fonctionner avec les d√©pendances de base.
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any
import sys
import os

from loguru import logger
import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest


class SecurityThreatLevel:
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class VoiceTone:
    NEUTRAL = "neutral"
    CONCERNED = "concerned"
    URGENT = "urgent"
    AUTHORITATIVE = "authoritative"


class SimpleVoiceEngine:
    """Moteur vocal simul√© pour la d√©monstration"""
    
    def __init__(self):
        self.is_enabled = True
        
    async def speak(self, text: str, tone: str = VoiceTone.NEUTRAL):
        """Simulation de synth√®se vocale"""
        tone_prefix = {
            VoiceTone.NEUTRAL: "[VOIX NEUTRE]",
            VoiceTone.CONCERNED: "[VOIX INQUI√àTE]",
            VoiceTone.URGENT: "[VOIX URGENTE]",
            VoiceTone.AUTHORITATIVE: "[VOIX AUTORITAIRE]"
        }
        
        prefix = tone_prefix.get(tone, "[VOIX]")
        print(f"\nüéôÔ∏è {prefix} {text}")
        
        # Simulation de d√©lai de parole
        await asyncio.sleep(len(text) * 0.05)  # 50ms par caract√®re


class SecurityIntelligence:
    """Module d'intelligence de s√©curit√© simplifi√©"""
    
    def __init__(self):
        self.threat_indicators = {
            "malicious_ips": [
                "192.168.1.100", "10.0.0.50", "185.220.100.240"
            ],
            "malicious_patterns": [
                "' OR '1'='1",
                "<script>",
                "union select",
                "../../../etc/passwd"
            ]
        }
        
        self.anomaly_detector = IsolationForest(contamination=0.1, random_state=42)
        
    def analyze_text(self, text: str) -> Dict[str, Any]:
        """Analyse de s√©curit√© d'un texte"""
        risk_score = 0.0
        detected_threats = []
        
        # D√©tection de patterns malicieux
        for pattern in self.threat_indicators["malicious_patterns"]:
            if pattern.lower() in text.lower():
                risk_score += 0.3
                detected_threats.append(f"Pattern malicieux: {pattern}")
        
        # D√©tection d'IPs suspectes
        for ip in self.threat_indicators["malicious_ips"]:
            if ip in text:
                risk_score += 0.4
                detected_threats.append(f"IP malicieuse: {ip}")
        
        # Mots-cl√©s de s√©curit√©
        security_keywords = [
            "ransomware", "malware", "intrusion", "attaque", "hack",
            "vuln√©rabilit√©", "exploit", "breach", "compromis"
        ]
        
        for keyword in security_keywords:
            if keyword.lower() in text.lower():
                risk_score += 0.2
                detected_threats.append(f"Mot-cl√© de s√©curit√©: {keyword}")
        
        # Calcul du niveau de menace
        if risk_score >= 0.8:
            threat_level = SecurityThreatLevel.CRITICAL
        elif risk_score >= 0.6:
            threat_level = SecurityThreatLevel.HIGH
        elif risk_score >= 0.3:
            threat_level = SecurityThreatLevel.MEDIUM
        else:
            threat_level = SecurityThreatLevel.LOW
        
        return {
            "risk_score": min(risk_score, 1.0),
            "threat_level": threat_level,
            "detected_threats": detected_threats,
            "recommendations": self._generate_recommendations(threat_level)
        }
    
    def _generate_recommendations(self, threat_level: str) -> List[str]:
        """G√©n√©ration de recommandations selon le niveau de menace"""
        recommendations = []
        
        if threat_level == SecurityThreatLevel.CRITICAL:
            recommendations = [
                "üö® Isolation imm√©diate des syst√®mes affect√©s",
                "üìû Notification de l'√©quipe de crise",
                "üîí Activation des proc√©dures d'urgence",
                "üìù Documentation compl√®te de l'incident"
            ]
        elif threat_level == SecurityThreatLevel.HIGH:
            recommendations = [
                "‚ö†Ô∏è Surveillance renforc√©e des syst√®mes",
                "üîç Analyse approfondie des logs",
                "üë• Notification de l'√©quipe de s√©curit√©",
                "üõ°Ô∏è Renforcement des mesures d√©fensives"
            ]
        elif threat_level == SecurityThreatLevel.MEDIUM:
            recommendations = [
                "üìä Monitoring continu",
                "üîé V√©rification des indicateurs",
                "üìã Mise √† jour des alertes"
            ]
        else:
            recommendations = [
                "‚úÖ Situation normale",
                "üìà Surveillance standard maintenue"
            ]
        
        return recommendations


class CyberSecAIDemo:
    """D√©monstration simplifi√©e de l'IA de s√©curit√©"""
    
    def __init__(self):
        self.voice_engine = SimpleVoiceEngine()
        self.security_intel = SecurityIntelligence()
        
    async def welcome_message(self):
        """Message de bienvenue"""
        welcome = """
        üõ°Ô∏è Bienvenue dans la d√©monstration de l'IA de S√©curit√© Informatique Vocale !
        
        Ce syst√®me combine intelligence artificielle et cybers√©curit√© pour:
        ‚Ä¢ Analyser les menaces en temps r√©el
        ‚Ä¢ D√©tecter les anomalies de s√©curit√©
        ‚Ä¢ Communiquer les alertes par synth√®se vocale
        ‚Ä¢ Recommander des actions de protection
        
        Commen√ßons la d√©monstration...
        """
        
        print("="*80)
        print(welcome)
        print("="*80)
        
        await self.voice_engine.speak(
            "Bienvenue dans la d√©monstration de l'IA de s√©curit√© informatique vocale. "
            "Je suis votre assistant de cybers√©curit√© intelligent.",
            VoiceTone.NEUTRAL
        )
    
    async def demo_voice_tones(self):
        """D√©monstration des diff√©rents tons vocaux"""
        print("\nüéØ D√âMONSTRATION DES TONS VOCAUX")
        print("-" * 40)
        
        tones = [
            (VoiceTone.NEUTRAL, "Voici un message d'information standard."),
            (VoiceTone.CONCERNED, "Attention, une anomalie a √©t√© d√©tect√©e."),
            (VoiceTone.URGENT, "ALERTE! Intervention imm√©diate n√©cessaire!"),
            (VoiceTone.AUTHORITATIVE, "Consigne de s√©curit√©: appliquez imm√©diatement le protocole.")
        ]
        
        for tone, message in tones:
            await self.voice_engine.speak(message, tone)
            await asyncio.sleep(1)
    
    async def demo_threat_analysis(self):
        """D√©monstration d'analyse de menaces"""
        print("\nüîç D√âMONSTRATION D'ANALYSE DE MENACES")
        print("-" * 40)
        
        test_scenarios = [
            {
                "name": "Injection SQL d√©tect√©e",
                "input": "Connexion suspecte avec payload: ' OR '1'='1 depuis 192.168.1.100",
                "expected": "HIGH"
            },
            {
                "name": "Alerte Ransomware",
                "input": "URGENT: Ransomware d√©tect√© sur le serveur principal, chiffrement en cours!",
                "expected": "CRITICAL"
            },
            {
                "name": "Message normal",
                "input": "Mise √† jour des politiques de s√©curit√© termin√©e avec succ√®s",
                "expected": "LOW"
            },
            {
                "name": "Intrusion d√©tect√©e",
                "input": "Intrusion d√©tect√©e depuis l'IP 185.220.100.240 avec exploit zero-day",
                "expected": "CRITICAL"
            }
        ]
        
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"\nüìã Sc√©nario {i}: {scenario['name']}")
            print(f"üìù Input: {scenario['input']}")
            
            # Analyse par l'IA de s√©curit√©
            analysis = self.security_intel.analyze_text(scenario['input'])
            
            print(f"üìä Analyse:")
            print(f"   ‚Ä¢ Score de risque: {analysis['risk_score']:.2f}/1.0")
            print(f"   ‚Ä¢ Niveau de menace: {analysis['threat_level'].upper()}")
            
            if analysis['detected_threats']:
                print(f"   ‚Ä¢ Menaces d√©tect√©es:")
                for threat in analysis['detected_threats']:
                    print(f"     - {threat}")
            
            # Communication vocale selon le niveau
            if analysis['threat_level'] == SecurityThreatLevel.CRITICAL:
                await self.voice_engine.speak(
                    f"ALERTE CRITIQUE! {scenario['name']}. Intervention imm√©diate requise!",
                    VoiceTone.URGENT
                )
            elif analysis['threat_level'] == SecurityThreatLevel.HIGH:
                await self.voice_engine.speak(
                    f"Alerte de s√©curit√© √©lev√©e: {scenario['name']}. Action n√©cessaire.",
                    VoiceTone.CONCERNED
                )
            else:
                await self.voice_engine.speak(
                    f"Information de s√©curit√©: {scenario['name']}.",
                    VoiceTone.NEUTRAL
                )
            
            # Recommandations
            print(f"üí° Recommandations:")
            for rec in analysis['recommendations']:
                print(f"   {rec}")
            
            await asyncio.sleep(2)
    
    async def demo_network_analysis(self):
        """D√©monstration d'analyse de trafic r√©seau"""
        print("\nüåê D√âMONSTRATION D'ANALYSE DE TRAFIC R√âSEAU")
        print("-" * 40)
        
        # Simulation de donn√©es r√©seau
        network_data = pd.DataFrame({
            'timestamp': pd.date_range('2024-01-01 12:00:00', periods=100, freq='1min'),
            'source_ip': np.random.choice(['192.168.1.10', '192.168.1.100', '10.0.0.50'], 100),
            'bytes_transferred': np.random.normal(1000, 500, 100),
            'packets_count': np.random.poisson(10, 100),
            'duration': np.random.exponential(2, 100)
        })
        
        # Injection d'anomalies
        network_data.loc[50:55, 'bytes_transferred'] = 50000  # Pic suspect
        network_data.loc[70:75, 'packets_count'] = 100       # Trafic anormal
        
        print("üìä Analyse de 100 √©v√©nements r√©seau...")
        
        # Pr√©paration des donn√©es pour la d√©tection d'anomalies
        features = network_data[['bytes_transferred', 'packets_count', 'duration']].values
        
        # D√©tection d'anomalies
        self.security_intel.anomaly_detector.fit(features)
        anomalies = self.security_intel.anomaly_detector.predict(features)
        
        anomaly_count = sum(1 for x in anomalies if x == -1)
        
        print(f"üö® {anomaly_count} anomalies d√©tect√©es dans le trafic r√©seau")
        
        if anomaly_count > 5:
            await self.voice_engine.speak(
                f"Attention! {anomaly_count} anomalies d√©tect√©es dans le trafic r√©seau. "
                "Possible attaque en cours. Investigation recommand√©e.",
                VoiceTone.CONCERNED
            )
        else:
            await self.voice_engine.speak(
                f"{anomaly_count} anomalies mineures d√©tect√©es. Surveillance standard maintenue.",
                VoiceTone.NEUTRAL
            )
        
        # Affichage des anomalies d√©tect√©es
        anomaly_indices = [i for i, x in enumerate(anomalies) if x == -1]
        if anomaly_indices:
            print("\nüìã D√©tails des anomalies:")
            for idx in anomaly_indices[:5]:  # Afficher les 5 premi√®res
                row = network_data.iloc[idx]
                print(f"   ‚Ä¢ {row['timestamp']}: {row['source_ip']} - "
                      f"{row['bytes_transferred']:.0f} bytes, "
                      f"{row['packets_count']} packets")
    
    async def demo_interactive_mode(self):
        """Mode interactif de d√©monstration"""
        print("\nüí¨ MODE INTERACTIF")
        print("-" * 40)
        print("Tapez vos messages de s√©curit√© (ou 'quit' pour quitter)")
        print("L'IA analysera chaque message et r√©pondra vocalement")
        print()
        
        await self.voice_engine.speak(
            "Mode interactif activ√©. D√©crivez-moi vos pr√©occupations de s√©curit√©.",
            VoiceTone.NEUTRAL
        )
        
        while True:
            try:
                user_input = input("\nüë§ Vous: ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'q']:
                    await self.voice_engine.speak(
                        "Session termin√©e. Merci d'avoir utilis√© l'assistant de cybers√©curit√©.",
                        VoiceTone.NEUTRAL
                    )
                    break
                
                if not user_input:
                    continue
                
                print("ü§ñ Analyse en cours...")
                
                # Analyse du message
                analysis = self.security_intel.analyze_text(user_input)
                
                print(f"üìä R√©sultat:")
                print(f"   ‚Ä¢ Score de risque: {analysis['risk_score']:.2f}")
                print(f"   ‚Ä¢ Niveau: {analysis['threat_level'].upper()}")
                
                # R√©ponse vocale adapt√©e
                if analysis['threat_level'] == SecurityThreatLevel.CRITICAL:
                    response = "Situation critique d√©tect√©e! Activation du protocole d'urgence."
                    tone = VoiceTone.URGENT
                elif analysis['threat_level'] == SecurityThreatLevel.HIGH:
                    response = "Menace √©lev√©e identifi√©e. Surveillance renforc√©e recommand√©e."
                    tone = VoiceTone.CONCERNED
                elif analysis['threat_level'] == SecurityThreatLevel.MEDIUM:
                    response = "Situation √† surveiller. Pr√©cautions recommand√©es."
                    tone = VoiceTone.CONCERNED
                else:
                    response = "Situation normale. Aucune menace d√©tect√©e."
                    tone = VoiceTone.NEUTRAL
                
                await self.voice_engine.speak(response, tone)
                
                # Affichage des recommandations
                if analysis['recommendations']:
                    print("üí° Recommandations:")
                    for rec in analysis['recommendations']:
                        print(f"   {rec}")
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
    
    async def run_full_demo(self):
        """Ex√©cution de la d√©monstration compl√®te"""
        try:
            await self.welcome_message()
            await asyncio.sleep(2)
            
            await self.demo_voice_tones()
            await asyncio.sleep(2)
            
            await self.demo_threat_analysis()
            await asyncio.sleep(2)
            
            await self.demo_network_analysis()
            await asyncio.sleep(2)
            
            print("\nüéâ D√âMONSTRATION TERMIN√âE")
            print("="*80)
            
            await self.voice_engine.speak(
                "D√©monstration termin√©e. L'IA de s√©curit√© informatique vocale est pr√™te "
                "√† prot√©ger votre infrastructure. Merci de votre attention.",
                VoiceTone.NEUTRAL
            )
            
        except KeyboardInterrupt:
            print("\n\nüëã D√©monstration interrompue")
            await self.voice_engine.speak("D√©monstration interrompue. Au revoir!", VoiceTone.NEUTRAL)


async def main():
    """Fonction principale"""
    print("üöÄ Initialisation de l'IA de S√©curit√© Informatique Vocale...")
    
    demo = CyberSecAIDemo()
    
    while True:
        print("\n" + "="*60)
        print("üõ°Ô∏è  IA DE S√âCURIT√â INFORMATIQUE VOCALE - MENU")
        print("="*60)
        print("1. üé¨ D√©monstration compl√®te")
        print("2. üéôÔ∏è Test des tons vocaux")
        print("3. üîç Analyse de menaces")
        print("4. üåê Analyse de trafic r√©seau")
        print("5. üí¨ Mode interactif")
        print("6. üö™ Quitter")
        print()
        
        choice = input("Choisissez une option (1-6): ").strip()
        
        try:
            if choice == "1":
                await demo.run_full_demo()
            elif choice == "2":
                await demo.demo_voice_tones()
            elif choice == "3":
                await demo.demo_threat_analysis()
            elif choice == "4":
                await demo.demo_network_analysis()
            elif choice == "5":
                await demo.demo_interactive_mode()
            elif choice == "6":
                print("\nüëã Au revoir !")
                break
            else:
                print("‚ùå Option invalide")
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir !")
            break
        except Exception as e:
            logger.error(f"Erreur: {e}")


if __name__ == "__main__":
    asyncio.run(main())