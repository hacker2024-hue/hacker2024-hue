#!/bin/bash

# =============================================================================
# Script de D√©marrage Rapide - IA de S√©curit√© Informatique Vocale
# =============================================================================

set -e  # Arr√™t en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonctions utilitaires
print_header() {
    echo -e "${CYAN}================================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}================================================${NC}"
}

print_step() {
    echo -e "${GREEN}[√âTAPE]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[ATTENTION]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERREUR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCC√àS]${NC} $1"
}

# V√©rification de Python
check_python() {
    print_step "V√©rification de Python..."
    
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
        print_info "Python ${PYTHON_VERSION} d√©tect√©"
        
        # V√©rification de la version minimum (3.9)
        if python3 -c "import sys; exit(0 if sys.version_info >= (3, 9) else 1)"; then
            print_success "Version Python compatible (‚â• 3.9)"
        else
            print_error "Python 3.9+ requis. Version actuelle: ${PYTHON_VERSION}"
            exit 1
        fi
    else
        print_error "Python 3 non trouv√©. Veuillez l'installer."
        exit 1
    fi
}

# Installation des d√©pendances
install_dependencies() {
    print_step "Installation des d√©pendances..."
    
    if [ -f "requirements.txt" ]; then
        print_info "Installation depuis requirements.txt..."
        pip3 install -r requirements.txt
        print_success "D√©pendances install√©es"
    else
        print_warning "requirements.txt non trouv√©, installation des d√©pendances de base..."
        pip3 install loguru fastapi uvicorn pydantic python-dotenv
    fi
}

# Installation des mod√®les spaCy
install_spacy_models() {
    print_step "Installation des mod√®les spaCy..."
    
    print_info "T√©l√©chargement du mod√®le anglais..."
    python3 -m spacy download en_core_web_sm 2>/dev/null || print_warning "Mod√®le anglais non install√©"
    
    print_info "T√©l√©chargement du mod√®le fran√ßais..."
    python3 -m spacy download fr_core_news_sm 2>/dev/null || print_warning "Mod√®le fran√ßais non install√©"
    
    print_success "Mod√®les spaCy configur√©s"
}

# Configuration de l'environnement
setup_environment() {
    print_step "Configuration de l'environnement..."
    
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            print_info "Cr√©ation du fichier .env depuis .env.example..."
            cp .env.example .env
            print_warning "Veuillez √©diter .env avec vos cl√©s API pour les services vocaux"
        else
            print_info "Cr√©ation d'un fichier .env basique..."
            cat > .env << EOF
# Configuration basique
DEBUG=true
LOG_LEVEL=INFO
MOCK_VOICE_SERVICES=true
DEMO_MODE=true
EOF
        fi
        print_success "Fichier .env cr√©√©"
    else
        print_info "Fichier .env d√©j√† pr√©sent"
    fi
}

# V√©rification des permissions audio
check_audio_permissions() {
    print_step "V√©rification des permissions audio..."
    
    if command -v pactl &> /dev/null; then
        if pactl info &> /dev/null; then
            print_success "Syst√®me audio PulseAudio d√©tect√©"
        else
            print_warning "PulseAudio non accessible"
        fi
    elif command -v aplay &> /dev/null; then
        print_info "Syst√®me audio ALSA d√©tect√©"
    else
        print_warning "Syst√®me audio non d√©tect√© - mode texte seulement"
    fi
}

# Cr√©ation des r√©pertoires n√©cessaires
create_directories() {
    print_step "Cr√©ation des r√©pertoires..."
    
    mkdir -p logs
    mkdir -p models
    mkdir -p temp
    
    print_success "R√©pertoires cr√©√©s"
}

# Test de base du syst√®me
test_basic_functionality() {
    print_step "Test des fonctionnalit√©s de base..."
    
    print_info "Test d'import des modules..."
    if python3 -c "
import sys
sys.path.insert(0, '.')
try:
    from core.config import config
    from communication.voice_engine import VoiceEngine
    from core.security_intelligence import SecurityIntelligenceEngine
    print('‚úÖ Tous les modules import√©s avec succ√®s')
except ImportError as e:
    print(f'‚ùå Erreur d\\'import: {e}')
    sys.exit(1)
" 2>/dev/null; then
        print_success "Modules principaux fonctionnels"
    else
        print_error "Erreur lors du test des modules"
        print_info "Certaines d√©pendances peuvent √™tre manquantes"
    fi
}

# Affichage des informations de d√©marrage
show_startup_info() {
    print_header "üõ°Ô∏è  IA DE S√âCURIT√â INFORMATIQUE VOCALE"
    
    echo -e "${PURPLE}Syst√®me initialis√© avec succ√®s!${NC}"
    echo ""
    echo -e "${CYAN}Options de d√©marrage:${NC}"
    echo -e "  ${GREEN}1.${NC} D√©monstration compl√®te:"
    echo -e "     ${YELLOW}python3 demo_voice_security_ai.py${NC}"
    echo ""
    echo -e "  ${GREEN}2.${NC} Serveur API:"
    echo -e "     ${YELLOW}python3 main.py${NC}"
    echo ""
    echo -e "  ${GREEN}3.${NC} Mode interactif direct:"
    echo -e "     ${YELLOW}python3 -c \"
import asyncio
from demo_voice_security_ai import VoiceSecurityAIDemo
demo = VoiceSecurityAIDemo()
asyncio.run(demo.initialize())
asyncio.run(demo.run_interactive_mode())
\"${NC}"
    echo ""
    echo -e "${CYAN}Configuration:${NC}"
    echo -e "  üìÅ Logs: ${YELLOW}logs/${NC}"
    echo -e "  ‚öôÔ∏è  Config: ${YELLOW}.env${NC}"
    echo -e "  ü§ñ Mod√®les: ${YELLOW}models/${NC}"
    echo ""
    echo -e "${BLUE}Pour des services vocaux avanc√©s, configurez dans .env:${NC}"
    echo -e "  ‚Ä¢ ${YELLOW}AZURE_SPEECH_KEY${NC} (Azure Speech Services)"
    echo -e "  ‚Ä¢ ${YELLOW}OPENAI_API_KEY${NC} (OpenAI Whisper/TTS)"
    echo -e "  ‚Ä¢ ${YELLOW}ELEVENLABS_API_KEY${NC} (Voix premium)"
    echo ""
}

# Menu principal
show_menu() {
    print_header "üöÄ MENU DE D√âMARRAGE"
    
    echo "Que souhaitez-vous faire ?"
    echo ""
    echo "1. üé¨ Lancer la d√©monstration compl√®te"
    echo "2. üéôÔ∏è Mode interactif (communication vocale)"
    echo "3. üåê D√©marrer le serveur API"
    echo "4. üîß Installer/mettre √† jour les d√©pendances"
    echo "5. üìä Tester les fonctionnalit√©s"
    echo "6. ‚ÑπÔ∏è  Afficher les informations syst√®me"
    echo "7. üö™ Quitter"
    echo ""
    read -p "Choix (1-7): " choice
    
    case $choice in
        1)
            print_info "Lancement de la d√©monstration..."
            python3 demo_voice_security_ai.py
            ;;
        2)
            print_info "Lancement du mode interactif..."
            python3 -c "
import asyncio
import sys
sys.path.insert(0, '.')
from demo_voice_security_ai import VoiceSecurityAIDemo
async def main():
    demo = VoiceSecurityAIDemo()
    await demo.initialize()
    await demo.run_interactive_mode()
asyncio.run(main())
"
            ;;
        3)
            print_info "D√©marrage du serveur API..."
            python3 main.py
            ;;
        4)
            install_dependencies
            install_spacy_models
            print_success "D√©pendances mises √† jour"
            ;;
        5)
            test_basic_functionality
            ;;
        6)
            show_startup_info
            ;;
        7)
            print_info "Au revoir!"
            exit 0
            ;;
        *)
            print_error "Choix invalide"
            show_menu
            ;;
    esac
}

# Script principal
main() {
    clear
    print_header "üõ°Ô∏è  CONFIGURATION IA S√âCURIT√â VOCALE"
    
    # V√©rifications pr√©liminaires
    check_python
    create_directories
    
    # Installation si n√©cessaire
    if [ "$1" = "--install" ] || [ "$1" = "-i" ]; then
        install_dependencies
        install_spacy_models
        setup_environment
        check_audio_permissions
        test_basic_functionality
        show_startup_info
    elif [ "$1" = "--demo" ] || [ "$1" = "-d" ]; then
        print_info "Lancement direct de la d√©monstration..."
        python3 demo_voice_security_ai.py
    elif [ "$1" = "--interactive" ] || [ "$1" = "-I" ]; then
        print_info "Lancement direct du mode interactif..."
        python3 -c "
import asyncio
import sys
sys.path.insert(0, '.')
from demo_voice_security_ai import VoiceSecurityAIDemo
async def main():
    demo = VoiceSecurityAIDemo()
    await demo.initialize()
    await demo.run_interactive_mode()
asyncio.run(main())
"
    elif [ "$1" = "--server" ] || [ "$1" = "-s" ]; then
        print_info "D√©marrage direct du serveur..."
        python3 main.py
    elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "Usage: $0 [option]"
        echo ""
        echo "Options:"
        echo "  -i, --install      Installation compl√®te"
        echo "  -d, --demo         D√©monstration directe"
        echo "  -I, --interactive  Mode interactif direct"
        echo "  -s, --server       Serveur API direct"
        echo "  -h, --help         Afficher cette aide"
        echo ""
        echo "Sans option: menu interactif"
        exit 0
    else
        # Menu interactif par d√©faut
        setup_environment
        check_audio_permissions
        show_menu
    fi
}

# Point d'entr√©e
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi