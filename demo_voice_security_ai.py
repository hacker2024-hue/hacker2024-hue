#!/usr/bin/env python3
"""
D√©monstration Compl√®te - IA de S√©curit√© Informatique Vocale Avanc√©e
===================================================================

Script de d√©monstration des capacit√©s compl√®tes du syst√®me d'IA de s√©curit√©
avec communication vocale haute qualit√© et intelligence de menaces.

Auteur: Assistant IA Avanc√©
Version: 1.0.0
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any
from pathlib import Path
import sys

# Ajout du r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent))

from loguru import logger
from core.ai_engine import CyberSecAI
from communication.interface import CommunicationInterface, CommunicationMode, UrgencyLevel
from communication.voice_engine import VoiceSettings, EmotionalTone, Language, VoiceQuality
from core.security_intelligence import NetworkEvent, ThreatLevel


class VoiceSecurityAIDemo:
    """
    D√©monstration interactive du syst√®me d'IA de s√©curit√© vocale
    """
    
    def __init__(self):
        self.ai_engine = None
        self.communication_interface = None
        self.demo_scenarios = []
        self.current_scenario = 0
        
    async def initialize(self):
        """Initialisation de la d√©monstration"""
        logger.info("üöÄ Initialisation de la d√©monstration IA de S√©curit√© Vocale...")
        
        try:
            # Initialisation du moteur IA
            self.ai_engine = CyberSecAI()
            await self.ai_engine.initialize()
            
            # Initialisation de l'interface de communication
            self.communication_interface = CommunicationInterface(self.ai_engine)
            await self.communication_interface.initialize()
            
            # Configuration des handlers de d√©monstration
            self.communication_interface.set_security_alert_handler(self._demo_security_alert_handler)
            self.communication_interface.set_emergency_response_handler(self._demo_emergency_handler)
            
            # Pr√©paration des sc√©narios de d√©monstration
            self._prepare_demo_scenarios()
            
            logger.success("‚úÖ D√©monstration initialis√©e avec succ√®s!")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation d√©monstration: {e}")
            raise
    
    def _prepare_demo_scenarios(self):
        """Pr√©paration des sc√©narios de d√©monstration"""
        
        self.demo_scenarios = [
            {
                "name": "Communication Vocale Basique",
                "description": "Test des capacit√©s vocales de base",
                "type": "voice_basic",
                "messages": [
                    "Bonjour, je suis votre assistant IA de s√©curit√©. Comment puis-je vous aider ?",
                    "Quelles sont les menaces actuelles sur mon r√©seau ?",
                    "Comment puis-je am√©liorer la s√©curit√© de mes syst√®mes ?"
                ]
            },
            {
                "name": "D√©tection d'Incident de S√©curit√©",
                "description": "Simulation d'un rapport d'incident avec escalade vocale",
                "type": "incident_report",
                "messages": [
                    "Je suspecte une intrusion sur mon serveur web",
                    "J'ai d√©tect√© des connexions suspectes depuis l'IP 185.220.100.240",
                    "Les logs montrent des tentatives d'injection SQL sur /admin/login"
                ]
            },
            {
                "name": "Analyse de Trafic R√©seau Malicieux",
                "description": "Simulation d'analyse de trafic r√©seau avec d√©tection d'anomalies",
                "type": "network_analysis",
                "network_events": [
                    {
                        "timestamp": datetime.now().isoformat(),
                        "source_ip": "185.220.100.240",
                        "destination_ip": "192.168.1.100",
                        "source_port": 12345,
                        "destination_port": 80,
                        "protocol": "HTTP",
                        "bytes_transferred": 1048576,
                        "uri": "/admin/login?id=1' OR '1'='1",
                        "user_agent": "sqlmap/1.0",
                        "http_method": "POST"
                    },
                    {
                        "timestamp": datetime.now().isoformat(),
                        "source_ip": "10.0.0.50",
                        "destination_ip": "8.8.8.8",
                        "source_port": 54321,
                        "destination_port": 53,
                        "protocol": "DNS",
                        "bytes_transferred": 512000000,  # 512MB - suspicieux pour DNS
                        "uri": "malware-example.com"
                    }
                ]
            },
            {
                "name": "Alerte Critique avec Communication d'Urgence",
                "description": "Test des alertes vocales critiques et escalades d'urgence",
                "type": "critical_alert",
                "messages": [
                    "ALERTE: Ransomware d√©tect√© sur le serveur de fichiers principal!",
                    "Encryption en cours d√©tect√©e, 50% des fichiers d√©j√† chiffr√©s",
                    "Besoin d'intervention imm√©diate pour isoler le syst√®me"
                ]
            },
            {
                "name": "Consultation de Threat Intelligence",
                "description": "Interrogation de l'intelligence de menaces avec r√©ponses vocales",
                "type": "threat_intel",
                "messages": [
                    "Quelles sont les nouvelles campagnes APT cette semaine ?",
                    "L'IP 185.220.100.240 est-elle r√©f√©renc√©e dans vos bases de menaces ?",
                    "Y a-t-il des vuln√©rabilit√©s critiques publi√©es aujourd'hui ?"
                ]
            }
        ]
    
    async def run_full_demo(self):
        """Ex√©cution de la d√©monstration compl√®te"""
        
        print("\n" + "="*80)
        print("üõ°Ô∏è  D√âMONSTRATION - IA DE S√âCURIT√â INFORMATIQUE VOCALE AVANC√âE")
        print("="*80)
        print()
        
        # Message de bienvenue vocal
        await self._welcome_message()
        
        # Ex√©cution de tous les sc√©narios
        for i, scenario in enumerate(self.demo_scenarios, 1):
            print(f"\nüìã SC√âNARIO {i}/{len(self.demo_scenarios)}: {scenario['name']}")
            print("-" * 60)
            print(f"Description: {scenario['description']}")
            print()
            
            await self._run_scenario(scenario)
            
            # Pause entre les sc√©narios
            if i < len(self.demo_scenarios):
                await self._pause_between_scenarios()
        
        # Message de conclusion
        await self._conclusion_message()
    
    async def _welcome_message(self):
        """Message de bienvenue vocal"""
        welcome_text = """
        Bienvenue dans la d√©monstration de notre syst√®me d'Intelligence Artificielle 
        de s√©curit√© informatique avec capacit√©s vocales avanc√©es. 
        
        Ce syst√®me combine:
        - Reconnaissance vocale en temps r√©el
        - Synth√®se vocale √©motionnelle haute qualit√©
        - Analyse de menaces avec IA
        - D√©tection d'anomalies comportementales
        - Escalade automatique des alertes critiques
        
        Commen√ßons la d√©monstration...
        """
        
        # Configuration vocale pour le message de bienvenue
        welcome_settings = VoiceSettings(
            language=Language.FRENCH,
            tone=EmotionalTone.REASSURING,
            quality=VoiceQuality.HIGH,
            speed=1.0,
            volume=0.8
        )
        
        print("üéôÔ∏è Message de bienvenue vocal...")
        if self.communication_interface.voice_enabled:
            await self.communication_interface.voice_engine.speak(welcome_text, welcome_settings)
        else:
            print("‚ö†Ô∏è Mode vocal non disponible - affichage texte uniquement")
            print(welcome_text)
        
        await asyncio.sleep(2)
    
    async def _run_scenario(self, scenario: Dict[str, Any]):
        """Ex√©cution d'un sc√©nario sp√©cifique"""
        
        scenario_type = scenario["type"]
        
        if scenario_type == "voice_basic":
            await self._demo_voice_basic(scenario)
        elif scenario_type == "incident_report":
            await self._demo_incident_report(scenario)
        elif scenario_type == "network_analysis":
            await self._demo_network_analysis(scenario)
        elif scenario_type == "critical_alert":
            await self._demo_critical_alert(scenario)
        elif scenario_type == "threat_intel":
            await self._demo_threat_intel(scenario)
    
    async def _demo_voice_basic(self, scenario: Dict[str, Any]):
        """D√©monstration des capacit√©s vocales de base"""
        
        print("üéØ Test des diff√©rents tons √©motionnels...")
        
        tones = [
            (EmotionalTone.NEUTRAL, "Voici un message avec un ton neutre."),
            (EmotionalTone.REASSURING, "Ce message est rassurant et bienveillant."),
            (EmotionalTone.CONCERNED, "Attention, ce message exprime de l'inqui√©tude."),
            (EmotionalTone.URGENT, "URGENT! Ce message n√©cessite une action imm√©diate!"),
            (EmotionalTone.AUTHORITATIVE, "Directive: Respectez imp√©rativement cette consigne de s√©curit√©.")
        ]
        
        for tone, message in tones:
            print(f"   üì¢ Ton {tone.value}: {message}")
            
            settings = VoiceSettings(
                language=Language.FRENCH,
                tone=tone,
                speed=1.1 if tone == EmotionalTone.URGENT else 1.0
            )
            
            if self.communication_interface.voice_enabled:
                await self.communication_interface.voice_engine.speak(message, settings)
                await asyncio.sleep(1)
        
        # Test des messages utilisateur
        print("\nüéØ Traitement de messages utilisateur...")
        
        for message in scenario["messages"]:
            print(f"   üë§ Utilisateur: {message}")
            
            response = await self.communication_interface.process_message(
                user_id="demo_user",
                content=message,
                mode=CommunicationMode.VOICE
            )
            
            print(f"   ü§ñ Assistant: {response.content[:100]}...")
            print(f"   üìä Confiance: {response.confidence:.2f} | Urgence: {response.urgency.value}")
            
            await asyncio.sleep(2)
    
    async def _demo_incident_report(self, scenario: Dict[str, Any]):
        """D√©monstration de rapport d'incident avec escalade"""
        
        print("üö® Simulation de rapport d'incident de s√©curit√©...")
        
        for i, message in enumerate(scenario["messages"], 1):
            print(f"\n   üìù Rapport d'incident - √âtape {i}")
            print(f"   üë§ Utilisateur: {message}")
            
            # Traitement du message avec analyse de s√©curit√©
            response = await self.communication_interface.process_message(
                user_id="security_analyst",
                content=message,
                mode=CommunicationMode.MIXED,
                session_id="incident_session_001"
            )
            
            print(f"   ü§ñ Analyse: {response.content[:150]}...")
            print(f"   ‚ö†Ô∏è Urgence d√©tect√©e: {response.urgency.value}")
            print(f"   üìã Recommandations: {len(response.recommendations)} actions")
            
            # Affichage des recommandations
            for j, rec in enumerate(response.recommendations[:3], 1):
                print(f"      {j}. {rec}")
            
            # Simulation d'escalade pour les messages critiques
            if response.urgency in [UrgencyLevel.HIGH, UrgencyLevel.CRITICAL]:
                print("   üö® ESCALADE D√âCLENCH√âE!")
                await self._simulate_escalation(response.urgency)
            
            await asyncio.sleep(3)
    
    async def _demo_network_analysis(self, scenario: Dict[str, Any]):
        """D√©monstration d'analyse de trafic r√©seau"""
        
        print("üåê Analyse de trafic r√©seau en temps r√©el...")
        
        # Simulation d'√©v√©nements r√©seau
        events_data = scenario["network_events"]
        
        print(f"   üìä Analyse de {len(events_data)} √©v√©nements r√©seau...")
        
        # Envoi des √©v√©nements pour analyse
        incidents = await self.communication_interface.simulate_network_traffic(events_data)
        
        print(f"   üö® {len(incidents)} incidents de s√©curit√© d√©tect√©s:")
        
        for i, incident in enumerate(incidents, 1):
            print(f"\n   üìã Incident {i}: {incident.title}")
            print(f"      üéØ Niveau de menace: {incident.threat_level.value}")
            print(f"      üîç Vecteur d'attaque: {incident.attack_vector.value}")
            print(f"      üìà Confiance: {incident.confidence_score:.2f}")
            print(f"      üõ†Ô∏è Actions recommand√©es: {len(incident.recommended_actions)}")
            
            # Communication vocale pour les incidents critiques
            if incident.threat_level in [ThreatLevel.CRITICAL, ThreatLevel.CATASTROPHIC]:
                critical_message = f"Incident critique d√©tect√©: {incident.title}. Intervention imm√©diate requise."
                
                critical_settings = VoiceSettings(
                    language=Language.FRENCH,
                    tone=EmotionalTone.URGENT,
                    speed=1.3
                )
                
                print("      üéôÔ∏è Alerte vocale critique √©mise...")
                if self.communication_interface.voice_enabled:
                    await self.communication_interface.voice_engine.speak(critical_message, critical_settings)
            
            await asyncio.sleep(2)
    
    async def _demo_critical_alert(self, scenario: Dict[str, Any]):
        """D√©monstration d'alerte critique avec communication d'urgence"""
        
        print("üö® SIMULATION D'ALERTE CRITIQUE MAXIMALE...")
        
        # Configuration vocale d'urgence maximale
        emergency_settings = VoiceSettings(
            language=Language.FRENCH,
            tone=EmotionalTone.URGENT,
            quality=VoiceQuality.HIGH,
            speed=1.4,
            volume=1.0
        )
        
        for message in scenario["messages"]:
            print(f"\n   üö® ALERTE: {message}")
            
            # Traitement avec priorit√© maximale
            response = await self.communication_interface.process_message(
                user_id="security_manager",
                content=message,
                mode=CommunicationMode.MIXED
            )
            
            print(f"   üìä Urgence: {response.urgency.value}")
            
            # Communication vocale d'urgence
            if response.urgency == UrgencyLevel.CRITICAL:
                urgent_message = f"ALERTE CRITIQUE CONFIRM√âE: {message[:50]}... Protocole d'urgence activ√©."
                
                print("   üéôÔ∏è COMMUNICATION VOCALE D'URGENCE...")
                if self.communication_interface.voice_enabled:
                    await self.communication_interface.voice_engine.speak(urgent_message, emergency_settings)
                
                # Simulation de proc√©dures d'urgence
                await self._simulate_emergency_procedures()
            
            await asyncio.sleep(3)
    
    async def _demo_threat_intel(self, scenario: Dict[str, Any]):
        """D√©monstration de consultation de threat intelligence"""
        
        print("üîç Consultation de l'intelligence de menaces...")
        
        # R√©cup√©ration du statut des menaces
        threat_status = await self.communication_interface.get_threat_status()
        
        print("   üìä √âtat actuel des menaces:")
        print(f"      ‚Ä¢ Incidents actifs: {threat_status.get('active_incidents', 0)}")
        print(f"      ‚Ä¢ Incidents 24h: {threat_status.get('total_incidents_24h', 0)}")
        
        threat_dist = threat_status.get('threat_distribution', {})
        for level, count in threat_dist.items():
            if count > 0:
                print(f"      ‚Ä¢ Niveau {level}: {count}")
        
        # Traitement des questions de threat intelligence
        for message in scenario["messages"]:
            print(f"\n   üë§ Question: {message}")
            
            response = await self.communication_interface.process_message(
                user_id="threat_analyst",
                content=message,
                mode=CommunicationMode.MIXED
            )
            
            print(f"   ü§ñ R√©ponse: {response.content[:200]}...")
            
            # Questions de suivi
            if response.follow_up_questions:
                print("   ‚ùì Questions de suivi sugg√©r√©es:")
                for q in response.follow_up_questions[:2]:
                    print(f"      ‚Ä¢ {q}")
            
            await asyncio.sleep(2)
    
    async def _simulate_escalation(self, urgency: UrgencyLevel):
        """Simulation d'escalade de s√©curit√©"""
        
        escalation_messages = {
            UrgencyLevel.HIGH: "Escalade niveau √©lev√©: √âquipe de s√©curit√© notifi√©e.",
            UrgencyLevel.CRITICAL: "Escalade critique: Cellule de crise activ√©e. Intervention imm√©diate en cours."
        }
        
        message = escalation_messages.get(urgency, "Escalade d√©clench√©e.")
        print(f"   üì¢ {message}")
        
        escalation_settings = VoiceSettings(
            language=Language.FRENCH,
            tone=EmotionalTone.AUTHORITATIVE,
            speed=1.2
        )
        
        if self.communication_interface.voice_enabled:
            await self.communication_interface.voice_engine.speak(message, escalation_settings)
        
        await asyncio.sleep(2)
    
    async def _simulate_emergency_procedures(self):
        """Simulation de proc√©dures d'urgence"""
        
        procedures = [
            "Isolation des syst√®mes affect√©s en cours...",
            "Sauvegarde d'urgence initi√©e...",
            "√âquipe de r√©ponse aux incidents mobilis√©e...",
            "Communication de crise pr√©par√©e..."
        ]
        
        for procedure in procedures:
            print(f"      ‚öôÔ∏è {procedure}")
            await asyncio.sleep(1)
        
        print("      ‚úÖ Proc√©dures d'urgence activ√©es")
    
    async def _pause_between_scenarios(self):
        """Pause entre les sc√©narios"""
        print("\n‚è∏Ô∏è Pause avant le prochain sc√©nario...")
        await asyncio.sleep(3)
    
    async def _conclusion_message(self):
        """Message de conclusion de la d√©monstration"""
        
        print("\n" + "="*80)
        print("‚úÖ D√âMONSTRATION TERMIN√âE")
        print("="*80)
        
        conclusion_text = """
        La d√©monstration du syst√®me d'IA de s√©curit√© informatique vocale est maintenant termin√©e.
        
        Vous avez pu observer:
        - Les capacit√©s de communication vocale √©motionnelle
        - L'analyse intelligente de menaces de s√©curit√©
        - La d√©tection d'anomalies en temps r√©el
        - L'escalade automatique des alertes critiques
        - L'int√©gration de la threat intelligence
        
        Ce syst√®me repr√©sente l'avenir de la cybers√©curit√© assist√©e par IA.
        Merci de votre attention.
        """
        
        conclusion_settings = VoiceSettings(
            language=Language.FRENCH,
            tone=EmotionalTone.REASSURING,
            speed=1.0
        )
        
        print("üéôÔ∏è Message de conclusion...")
        if self.communication_interface.voice_enabled:
            await self.communication_interface.voice_engine.speak(conclusion_text, conclusion_settings)
        else:
            print(conclusion_text)
        
        # Statistiques finales
        await self._display_final_stats()
    
    async def _display_final_stats(self):
        """Affichage des statistiques finales"""
        
        print("\nüìä STATISTIQUES DE LA D√âMONSTRATION")
        print("-" * 40)
        
        # R√©cup√©ration des stats de threat intelligence
        threat_status = await self.communication_interface.get_threat_status()
        
        print(f"üíæ Indicateurs de menaces charg√©s:")
        threat_intel = threat_status.get('threat_intelligence_indicators', {})
        for indicator_type, count in threat_intel.items():
            print(f"   ‚Ä¢ {indicator_type}: {count}")
        
        print(f"\nüîä Capacit√©s vocales:")
        if self.communication_interface.voice_enabled:
            voices = await self.communication_interface.voice_engine.get_available_voices()
            print(f"   ‚Ä¢ Voix disponibles: {len(voices)}")
            print(f"   ‚Ä¢ Services configur√©s: Moteur vocal actif")
        else:
            print("   ‚Ä¢ Mode vocal: Non disponible")
        
        print(f"\nüéØ Sc√©narios ex√©cut√©s: {len(self.demo_scenarios)}")
        print(f"‚è±Ô∏è Dur√©e totale: ~{len(self.demo_scenarios) * 2} minutes")
    
    async def _demo_security_alert_handler(self, alert_type: str, data: Any, context: Any):
        """Handler pour les alertes de s√©curit√© de la d√©monstration"""
        print(f"   üö® HANDLER ALERTE: {alert_type} - {type(data).__name__}")
    
    async def _demo_emergency_handler(self, response: Any, context: Any):
        """Handler pour les urgences de la d√©monstration"""
        print(f"   üÜò HANDLER URGENCE: Proc√©dures d'urgence activ√©es")
    
    async def run_interactive_mode(self):
        """Mode interactif pour tester l'IA vocale"""
        
        print("\nüéôÔ∏è MODE INTERACTIF - COMMUNICATION VOCALE")
        print("=" * 50)
        print("Tapez vos messages ou 'quit' pour quitter")
        print("Les r√©ponses seront fournies en mode vocal et textuel")
        print()
        
        # Activation du mode vocal
        voice_activated = await self.communication_interface.enable_voice_mode()
        
        if voice_activated:
            print("‚úÖ Mode vocal activ√© - L'IA vous √©coute...")
        else:
            print("‚ö†Ô∏è Mode vocal non disponible - Mode texte seulement")
        
        session_id = "interactive_session"
        
        while True:
            try:
                # Saisie utilisateur
                user_input = input("\nüë§ Vous: ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'q']:
                    break
                
                if not user_input:
                    continue
                
                # Traitement du message
                print("ü§ñ Traitement en cours...")
                
                response = await self.communication_interface.process_message(
                    user_id="interactive_user",
                    content=user_input,
                    mode=CommunicationMode.MIXED,
                    session_id=session_id
                )
                
                # Affichage de la r√©ponse
                print(f"\nü§ñ Assistant: {response.content}")
                print(f"üìä Confiance: {response.confidence:.2f} | Urgence: {response.urgency.value}")
                
                # Recommandations si disponibles
                if response.recommendations:
                    print("üí° Recommandations:")
                    for i, rec in enumerate(response.recommendations[:3], 1):
                        print(f"   {i}. {rec}")
                
                # Questions de suivi
                if response.follow_up_questions:
                    print("‚ùì Questions sugg√©r√©es:")
                    for q in response.follow_up_questions:
                        print(f"   ‚Ä¢ {q}")
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                logger.error(f"Erreur mode interactif: {e}")
        
        # D√©sactivation du mode vocal
        await self.communication_interface.disable_voice_mode()
        print("\nüëã Mode interactif termin√©")


async def main():
    """Fonction principale de d√©monstration"""
    
    # Configuration du logging
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{message}</cyan>",
        level="INFO"
    )
    
    demo = VoiceSecurityAIDemo()
    
    try:
        # Initialisation
        await demo.initialize()
        
        # Menu principal
        while True:
            print("\n" + "="*60)
            print("üõ°Ô∏è  IA DE S√âCURIT√â INFORMATIQUE VOCALE - MENU PRINCIPAL")
            print("="*60)
            print("1. üé¨ D√©monstration compl√®te (automatique)")
            print("2. üéôÔ∏è Mode interactif (communication vocale)")
            print("3. üìä Afficher les capacit√©s du syst√®me")
            print("4. üö™ Quitter")
            print()
            
            choice = input("Choisissez une option (1-4): ").strip()
            
            if choice == "1":
                await demo.run_full_demo()
            elif choice == "2":
                await demo.run_interactive_mode()
            elif choice == "3":
                await demo._display_final_stats()
            elif choice == "4":
                break
            else:
                print("‚ùå Option invalide, veuillez r√©essayer")
    
    except KeyboardInterrupt:
        print("\n\nüëã D√©monstration interrompue par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
    finally:
        # Nettoyage
        if demo.communication_interface:
            await demo.communication_interface.shutdown()
        print("\n‚úÖ Syst√®me arr√™t√© proprement")


if __name__ == "__main__":
    asyncio.run(main())